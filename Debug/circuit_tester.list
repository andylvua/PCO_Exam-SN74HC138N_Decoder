
circuit_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dbc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f90  08006f90  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f98  08006f98  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000090  08007030  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  08007030  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a30  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c4  00000000  00000000  00035af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000392b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  0003a408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019581  00000000  00000000  0003b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179d2  00000000  00000000  00054969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea02  00000000  00000000  0006c33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fad3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e8  00000000  00000000  000fad90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006f3c 	.word	0x08006f3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08006f3c 	.word	0x08006f3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <set_SELECT.0>:
  MX_SPI1_Init();
  MX_USB_HOST_Init();
  /* USER CODE BEGIN 2 */
  const int Y_Pinout[8] = Y_Pins;

  void set_SELECT(int a, int b, int c) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	f8c7 c000 	str.w	ip, [r7]
      HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, a);
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <set_SELECT.0+0x48>)
 80004f8:	f001 f8ce 	bl	8001698 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, b);
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	461a      	mov	r2, r3
 8000502:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <set_SELECT.0+0x48>)
 8000508:	f001 f8c6 	bl	8001698 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, c);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <set_SELECT.0+0x48>)
 8000518:	f001 f8be 	bl	8001698 <HAL_GPIO_WritePin>
  }
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40020c00 	.word	0x40020c00

08000528 <main>:
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b090      	sub	sp, #64	; 0x40
 800052c:	af00      	add	r7, sp, #0
int main(void)
 800052e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000532:	623b      	str	r3, [r7, #32]
  HAL_Init();
 8000534:	f000 fd6c 	bl	8001010 <HAL_Init>
  SystemClock_Config();
 8000538:	f000 f90c 	bl	8000754 <SystemClock_Config>
  PeriphCommonClock_Config();
 800053c:	f000 f972 	bl	8000824 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000540:	f000 fa52 	bl	80009e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000544:	f000 f98e 	bl	8000864 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000548:	f000 f9ba 	bl	80008c0 <MX_I2S2_Init>
  MX_I2S3_Init();
 800054c:	f000 f9e6 	bl	800091c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000550:	f000 fa14 	bl	800097c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000554:	f006 f902 	bl	800675c <MX_USB_HOST_Init>
  const int Y_Pinout[8] = Y_Pins;
 8000558:	4b3c      	ldr	r3, [pc, #240]	; (800064c <main+0x124>)
 800055a:	463c      	mov	r4, r7
 800055c:	461d      	mov	r5, r3
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	* If decoder works correctly, the GREEN LED will light up continuously.
	*
	* Program is testing only one time.
	*/

	int isCorrect = 1;
 800056a:	2301      	movs	r3, #1
 800056c:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (int c = 0; c < 2; c++) {
 800056e:	2300      	movs	r3, #0
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
 8000572:	e054      	b.n	800061e <main+0xf6>
	  for (int b = 0; b < 2; b++) {
 8000574:	2300      	movs	r3, #0
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
 8000578:	e04b      	b.n	8000612 <main+0xea>
		  for (int a = 0; a < 2; a++) {
 800057a:	2300      	movs	r3, #0
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
 800057e:	e042      	b.n	8000606 <main+0xde>
			  // set A, B, C
			  set_SELECT(a, b, c);
 8000580:	463b      	mov	r3, r7
 8000582:	469c      	mov	ip, r3
 8000584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800058a:	f7ff ffa7 	bl	80004dc <set_SELECT.0>

			  HAL_Delay(100); // Allow the output to settle
 800058e:	2064      	movs	r0, #100	; 0x64
 8000590:	f000 fdb0 	bl	80010f4 <HAL_Delay>

			  int *y_output;
			  y_output = read_OUTPUT();
 8000594:	463b      	mov	r3, r7
 8000596:	469c      	mov	ip, r3
 8000598:	f000 f85c 	bl	8000654 <read_OUTPUT.1>
 800059c:	62b8      	str	r0, [r7, #40]	; 0x28

			  // Expected_output is binary number of length 8,
			  // with 0 at the position of binary number with the bits c, b, a
			  int expected_output = 0xFF - (1 << (c * 4 + b * 2 + a));
 800059e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a4:	4413      	add	r3, r2
 80005a6:	005a      	lsls	r2, r3, #1
 80005a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005aa:	4413      	add	r3, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24

			  for (int i = 0; i < 8; i++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005bc:	e011      	b.n	80005e2 <main+0xba>
				  // Compare each bit
				  if (*(y_output + i) != (expected_output >> i & 1)) {
 80005be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005c4:	4413      	add	r3, r2
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80005ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005cc:	fa41 f303 	asr.w	r3, r1, r3
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d001      	beq.n	80005dc <main+0xb4>
					  isCorrect = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
			  for (int i = 0; i < 8; i++) {
 80005dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005de:	3301      	adds	r3, #1
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e4:	2b07      	cmp	r3, #7
 80005e6:	ddea      	ble.n	80005be <main+0x96>
				  }
			  }

			  if (isCorrect) {
 80005e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <main+0xd0>
				  onetime_OK_blink();
 80005ee:	463b      	mov	r3, r7
 80005f0:	469c      	mov	ip, r3
 80005f2:	f000 f877 	bl	80006e4 <onetime_OK_blink.2>
 80005f6:	e003      	b.n	8000600 <main+0xd8>
			  } else {
				  onetime_ERROR_blink();
 80005f8:	463b      	mov	r3, r7
 80005fa:	469c      	mov	ip, r3
 80005fc:	f000 f88e 	bl	800071c <onetime_ERROR_blink.3>
		  for (int a = 0; a < 2; a++) {
 8000600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000602:	3301      	adds	r3, #1
 8000604:	633b      	str	r3, [r7, #48]	; 0x30
 8000606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000608:	2b01      	cmp	r3, #1
 800060a:	ddb9      	ble.n	8000580 <main+0x58>
	  for (int b = 0; b < 2; b++) {
 800060c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800060e:	3301      	adds	r3, #1
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
 8000612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000614:	2b01      	cmp	r3, #1
 8000616:	ddb0      	ble.n	800057a <main+0x52>
	for (int c = 0; c < 2; c++) {
 8000618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800061a:	3301      	adds	r3, #1
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
 800061e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000620:	2b01      	cmp	r3, #1
 8000622:	dda7      	ble.n	8000574 <main+0x4c>
			  }
		  }
	  }
	}

	if (isCorrect) {
 8000624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <main+0x110>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <main+0x128>)
 8000632:	f001 f831 	bl	8001698 <HAL_GPIO_WritePin>
	} else {
	  ERROR_blink();
	}

	break;
 8000636:	e003      	b.n	8000640 <main+0x118>
	  ERROR_blink();
 8000638:	463b      	mov	r3, r7
 800063a:	469c      	mov	ip, r3
 800063c:	f000 f836 	bl	80006ac <ERROR_blink.4>
	break;
 8000640:	bf00      	nop
 8000642:	2300      	movs	r3, #0
    MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000644:	4618      	mov	r0, r3
 8000646:	3740      	adds	r7, #64	; 0x40
 8000648:	46bd      	mov	sp, r7
 800064a:	bdb0      	pop	{r4, r5, r7, pc}
 800064c:	08006f54 	.word	0x08006f54
 8000650:	40020c00 	.word	0x40020c00

08000654 <read_OUTPUT.1>:
  int* read_OUTPUT() {
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4664      	mov	r4, ip
 800065c:	f8c7 c004 	str.w	ip, [r7, #4]
      int *output = malloc(8 * sizeof(int));
 8000660:	2020      	movs	r0, #32
 8000662:	f006 fb55 	bl	8006d10 <malloc>
 8000666:	4603      	mov	r3, r0
 8000668:	60bb      	str	r3, [r7, #8]
      for (int i = 0; i < 8; i++) {
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	e012      	b.n	8000696 <read_OUTPUT.1+0x42>
          output[i] = HAL_GPIO_ReadPin(GPIOE, Y_Pinout[i]);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8000676:	b29b      	uxth	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	480b      	ldr	r0, [pc, #44]	; (80006a8 <read_OUTPUT.1+0x54>)
 800067c:	f000 fff4 	bl	8001668 <HAL_GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	4619      	mov	r1, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	4413      	add	r3, r2
 800068c:	460a      	mov	r2, r1
 800068e:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 8; i++) {
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2b07      	cmp	r3, #7
 800069a:	dde9      	ble.n	8000670 <read_OUTPUT.1+0x1c>
      return output;
 800069c:	68bb      	ldr	r3, [r7, #8]
  }
 800069e:	4618      	mov	r0, r3
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <ERROR_blink.4>:
  void ERROR_blink() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	f8c7 c004 	str.w	ip, [r7, #4]
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006bc:	4808      	ldr	r0, [pc, #32]	; (80006e0 <ERROR_blink.4+0x34>)
 80006be:	f000 ffeb 	bl	8001698 <HAL_GPIO_WritePin>
          HAL_Delay(300);
 80006c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006c6:	f000 fd15 	bl	80010f4 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <ERROR_blink.4+0x34>)
 80006d2:	f000 ffe1 	bl	8001698 <HAL_GPIO_WritePin>
          HAL_Delay(300);
 80006d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006da:	f000 fd0b 	bl	80010f4 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80006de:	e7ea      	b.n	80006b6 <ERROR_blink.4+0xa>
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <onetime_OK_blink.2>:
  void onetime_OK_blink() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	f8c7 c004 	str.w	ip, [r7, #4]
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <onetime_OK_blink.2+0x34>)
 80006f6:	f000 ffcf 	bl	8001698 <HAL_GPIO_WritePin>
      HAL_Delay(300);
 80006fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006fe:	f000 fcf9 	bl	80010f4 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <onetime_OK_blink.2+0x34>)
 800070a:	f000 ffc5 	bl	8001698 <HAL_GPIO_WritePin>
  }
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020c00 	.word	0x40020c00

0800071c <onetime_ERROR_blink.3>:
  void onetime_ERROR_blink() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	f8c7 c004 	str.w	ip, [r7, #4]
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <onetime_ERROR_blink.3+0x34>)
 800072e:	f000 ffb3 	bl	8001698 <HAL_GPIO_WritePin>
      HAL_Delay(300);
 8000732:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000736:	f000 fcdd 	bl	80010f4 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <onetime_ERROR_blink.3+0x34>)
 8000742:	f000 ffa9 	bl	8001698 <HAL_GPIO_WritePin>
  }
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020c00 	.word	0x40020c00

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f006 fae4 	bl	8006d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <SystemClock_Config+0xc8>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a26      	ldr	r2, [pc, #152]	; (800081c <SystemClock_Config+0xc8>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemClock_Config+0xc8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <SystemClock_Config+0xcc>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a20      	ldr	r2, [pc, #128]	; (8000820 <SystemClock_Config+0xcc>)
 800079e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007c8:	23c0      	movs	r3, #192	; 0xc0
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 f949 	bl	8003a70 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e4:	f000 f9e2 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2103      	movs	r1, #3
 8000804:	4618      	mov	r0, r3
 8000806:	f003 fbab 	bl	8003f60 <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000810:	f000 f9cc 	bl	8000bac <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	; 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
 8000838:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800083a:	2301      	movs	r3, #1
 800083c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800083e:	23c8      	movs	r3, #200	; 0xc8
 8000840:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000842:	2305      	movs	r3, #5
 8000844:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f003 fd93 	bl	8004378 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000858:	f000 f9a8 	bl	8000bac <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_I2C1_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <MX_I2C1_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000870:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_I2C1_Init+0x58>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_I2C1_Init+0x50>)
 80008a2:	f002 fb01 	bl	8002ea8 <HAL_I2C_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 f97e 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000ac 	.word	0x200000ac
 80008b8:	40005400 	.word	0x40005400
 80008bc:	000186a0 	.word	0x000186a0

080008c0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_I2S2_Init+0x50>)
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_I2S2_Init+0x54>)
 80008c8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_I2S2_Init+0x50>)
 80008cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_I2S2_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_I2S2_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_I2S2_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_I2S2_Init+0x50>)
 80008e6:	4a0c      	ldr	r2, [pc, #48]	; (8000918 <MX_I2S2_Init+0x58>)
 80008e8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_I2S2_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_I2S2_Init+0x50>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_I2S2_Init+0x50>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_I2S2_Init+0x50>)
 80008fe:	f002 fc17 	bl	8003130 <HAL_I2S_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000908:	f000 f950 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000100 	.word	0x20000100
 8000914:	40003800 	.word	0x40003800
 8000918:	00017700 	.word	0x00017700

0800091c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_I2S3_Init+0x54>)
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <MX_I2S3_Init+0x58>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_I2S3_Init+0x54>)
 8000928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_I2S3_Init+0x54>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_I2S3_Init+0x54>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_I2S3_Init+0x54>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_I2S3_Init+0x54>)
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <MX_I2S3_Init+0x5c>)
 8000946:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_I2S3_Init+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_I2S3_Init+0x54>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_I2S3_Init+0x54>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_I2S3_Init+0x54>)
 800095c:	f002 fbe8 	bl	8003130 <HAL_I2S_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000966:	f000 f921 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000148 	.word	0x20000148
 8000974:	40003c00 	.word	0x40003c00
 8000978:	00017700 	.word	0x00017700

0800097c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_SPI1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI1_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009ce:	f003 fe23 	bl	8004618 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f000 f8e8 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000190 	.word	0x20000190
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	4b65      	ldr	r3, [pc, #404]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a64      	ldr	r2, [pc, #400]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b62      	ldr	r3, [pc, #392]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0310 	and.w	r3, r3, #16
 8000a16:	61bb      	str	r3, [r7, #24]
 8000a18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	4b5e      	ldr	r3, [pc, #376]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a5d      	ldr	r2, [pc, #372]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b5b      	ldr	r3, [pc, #364]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b57      	ldr	r3, [pc, #348]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a56      	ldr	r2, [pc, #344]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b54      	ldr	r3, [pc, #336]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b50      	ldr	r3, [pc, #320]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a4f      	ldr	r2, [pc, #316]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b49      	ldr	r3, [pc, #292]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a48      	ldr	r2, [pc, #288]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b46      	ldr	r3, [pc, #280]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b42      	ldr	r3, [pc, #264]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MX_GPIO_Init+0x1b0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	483c      	ldr	r0, [pc, #240]	; (8000b9c <MX_GPIO_Init+0x1b4>)
 8000aac:	f000 fdf4 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	483a      	ldr	r0, [pc, #232]	; (8000ba0 <MX_GPIO_Init+0x1b8>)
 8000ab6:	f000 fdef 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A_Pin|B_Pin|C_Pin, GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ac0:	4838      	ldr	r0, [pc, #224]	; (8000ba4 <MX_GPIO_Init+0x1bc>)
 8000ac2:	f000 fde9 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000acc:	4835      	ldr	r0, [pc, #212]	; (8000ba4 <MX_GPIO_Init+0x1bc>)
 8000ace:	f000 fde3 	bl	8001698 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DATA_Ready_Pin Y0_Pin Y1_Pin Y2_Pin
                           Y3_Pin Y4_Pin Y5_Pin Y6_Pin
                           Y7_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin|Y0_Pin|Y1_Pin|Y2_Pin
 8000ad2:	f647 7384 	movw	r3, #32644	; 0x7f84
 8000ad6:	61fb      	str	r3, [r7, #28]
                          |Y3_Pin|Y4_Pin|Y5_Pin|Y6_Pin
                          |Y7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482d      	ldr	r0, [pc, #180]	; (8000b9c <MX_GPIO_Init+0x1b4>)
 8000ae8:	f000 fc3a 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aec:	2308      	movs	r3, #8
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4826      	ldr	r0, [pc, #152]	; (8000b9c <MX_GPIO_Init+0x1b4>)
 8000b04:	f000 fc2c 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000b08:	2332      	movs	r3, #50	; 0x32
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	481f      	ldr	r0, [pc, #124]	; (8000b9c <MX_GPIO_Init+0x1b4>)
 8000b1e:	f000 fc1f 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <MX_GPIO_Init+0x1b8>)
 8000b3a:	f000 fc11 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b42:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <MX_GPIO_Init+0x1c0>)
 8000b54:	f000 fc04 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|LD4_Pin
 8000b58:	f24f 7310 	movw	r3, #63248	; 0xf710
 8000b5c:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0x1bc>)
 8000b72:	f000 fbf5 	bl	8001360 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b76:	2320      	movs	r3, #32
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_GPIO_Init+0x1bc>)
 8000b8a:	f000 fbe9 	bl	8001360 <HAL_GPIO_Init>

}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	; 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40020000 	.word	0x40020000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f000 fb70 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12c      	bne.n	8000c84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c46:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <HAL_I2C_MspInit+0x8c>)
 8000c64:	f000 fb7c 	bl	8001360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a59      	ldr	r2, [pc, #356]	; (8000e1c <HAL_I2S_MspInit+0x184>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d15b      	bne.n	8000d72 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	4b58      	ldr	r3, [pc, #352]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a57      	ldr	r2, [pc, #348]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	4b51      	ldr	r3, [pc, #324]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a49      	ldr	r2, [pc, #292]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d1e:	2306      	movs	r3, #6
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	483e      	ldr	r0, [pc, #248]	; (8000e24 <HAL_I2S_MspInit+0x18c>)
 8000d2a:	f000 fb19 	bl	8001360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	4836      	ldr	r0, [pc, #216]	; (8000e24 <HAL_I2S_MspInit+0x18c>)
 8000d4a:	f000 fb09 	bl	8001360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000d4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d60:	2305      	movs	r3, #5
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	482f      	ldr	r0, [pc, #188]	; (8000e28 <HAL_I2S_MspInit+0x190>)
 8000d6c:	f000 faf8 	bl	8001360 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d70:	e04f      	b.n	8000e12 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a2d      	ldr	r2, [pc, #180]	; (8000e2c <HAL_I2S_MspInit+0x194>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d14a      	bne.n	8000e12 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_I2S_MspInit+0x188>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000de0:	2306      	movs	r3, #6
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <HAL_I2S_MspInit+0x198>)
 8000dec:	f000 fab8 	bl	8001360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000df0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e02:	2306      	movs	r3, #6
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_I2S_MspInit+0x18c>)
 8000e0e:	f000 faa7 	bl	8001360 <HAL_GPIO_Init>
}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	; 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40003800 	.word	0x40003800
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40003c00 	.word	0x40003c00
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_SPI_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e8e:	23e0      	movs	r3, #224	; 0xe0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000eaa:	f000 fa59 	bl	8001360 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f8d0 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <OTG_FS_IRQHandler+0x10>)
 8000f1e:	f000 fe3f 	bl	8001ba0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200005cc 	.word	0x200005cc

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f005 feae 	bl	8006cbc <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20020000 	.word	0x20020000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	200001e8 	.word	0x200001e8
 8000f94:	200008e0 	.word	0x200008e0

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd8:	4c0b      	ldr	r4, [pc, #44]	; (8001008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff ffd7 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f005 fe6d 	bl	8006cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fa9b 	bl	8000528 <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001000:	08006fa0 	.word	0x08006fa0
  ldr r2, =_sbss
 8001004:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001008:	200008e0 	.word	0x200008e0

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f94f 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fdb8 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f967 	bl	8001346 <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001090:	f000 f92f 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000004 	.word	0x20000004

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	200001ec 	.word	0x200001ec

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200001ec 	.word	0x200001ec

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff3e 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff31 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	e159      	b.n	8001630 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	f040 8148 	bne.w	800162a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d005      	beq.n	80013b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d130      	bne.n	8001414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b03      	cmp	r3, #3
 800141e:	d017      	beq.n	8001450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d123      	bne.n	80014a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	69b9      	ldr	r1, [r7, #24]
 80014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a2 	beq.w	800162a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b57      	ldr	r3, [pc, #348]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a56      	ldr	r2, [pc, #344]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_GPIO_Init+0x2e8>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001502:	4a52      	ldr	r2, [pc, #328]	; (800164c <HAL_GPIO_Init+0x2ec>)
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a49      	ldr	r2, [pc, #292]	; (8001650 <HAL_GPIO_Init+0x2f0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x202>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a48      	ldr	r2, [pc, #288]	; (8001654 <HAL_GPIO_Init+0x2f4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x1fe>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_GPIO_Init+0x2f8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x1fa>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a46      	ldr	r2, [pc, #280]	; (800165c <HAL_GPIO_Init+0x2fc>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x1f6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a45      	ldr	r2, [pc, #276]	; (8001660 <HAL_GPIO_Init+0x300>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x1f2>
 800154e:	2304      	movs	r3, #4
 8001550:	e008      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001552:	2307      	movs	r3, #7
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001556:	2303      	movs	r3, #3
 8001558:	e004      	b.n	8001564 <HAL_GPIO_Init+0x204>
 800155a:	2302      	movs	r3, #2
 800155c:	e002      	b.n	8001564 <HAL_GPIO_Init+0x204>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x204>
 8001562:	2300      	movs	r3, #0
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	f002 0203 	and.w	r2, r2, #3
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	4093      	lsls	r3, r2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001574:	4935      	ldr	r1, [pc, #212]	; (800164c <HAL_GPIO_Init+0x2ec>)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a6:	4a2f      	ldr	r2, [pc, #188]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d0:	4a24      	ldr	r2, [pc, #144]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fa:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <HAL_GPIO_Init+0x304>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001624:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_GPIO_Init+0x304>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3301      	adds	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	f67f aea2 	bls.w	800137c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40013800 	.word	0x40013800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40013c00 	.word	0x40013c00

08001668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e001      	b.n	800168a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b4:	e003      	b.n	80016be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016cc:	b08f      	sub	sp, #60	; 0x3c
 80016ce:	af0a      	add	r7, sp, #40	; 0x28
 80016d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e054      	b.n	8001786 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f005 f884 	bl	8006804 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2203      	movs	r2, #3
 8001700:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f877 	bl	800480e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	687e      	ldr	r6, [r7, #4]
 8001728:	466d      	mov	r5, sp
 800172a:	f106 0410 	add.w	r4, r6, #16
 800172e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001736:	e894 0003 	ldmia.w	r4, {r0, r1}
 800173a:	e885 0003 	stmia.w	r5, {r0, r1}
 800173e:	1d33      	adds	r3, r6, #4
 8001740:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f002 fff1 	bl	800472a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f86e 	bl	8004830 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	687e      	ldr	r6, [r7, #4]
 800175c:	466d      	mov	r5, sp
 800175e:	f106 0410 	add.w	r4, r6, #16
 8001762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800176e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001772:	1d33      	adds	r3, r6, #4
 8001774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001776:	6838      	ldr	r0, [r7, #0]
 8001778:	f003 f9f6 	bl	8004b68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800178e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800178e:	b590      	push	{r4, r7, lr}
 8001790:	b089      	sub	sp, #36	; 0x24
 8001792:	af04      	add	r7, sp, #16
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	4608      	mov	r0, r1
 8001798:	4611      	mov	r1, r2
 800179a:	461a      	mov	r2, r3
 800179c:	4603      	mov	r3, r0
 800179e:	70fb      	strb	r3, [r7, #3]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70bb      	strb	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_HCD_HC_Init+0x28>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e076      	b.n	80018a4 <HAL_HCD_HC_Init+0x116>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	333d      	adds	r3, #61	; 0x3d
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	3338      	adds	r3, #56	; 0x38
 80017de:	787a      	ldrb	r2, [r7, #1]
 80017e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	3340      	adds	r3, #64	; 0x40
 80017f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017f2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	212c      	movs	r1, #44	; 0x2c
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	4413      	add	r3, r2
 8001800:	3339      	adds	r3, #57	; 0x39
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	333f      	adds	r3, #63	; 0x3f
 8001814:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001818:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	78ba      	ldrb	r2, [r7, #2]
 800181e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001822:	b2d0      	uxtb	r0, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	333a      	adds	r3, #58	; 0x3a
 8001830:	4602      	mov	r2, r0
 8001832:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001834:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001838:	2b00      	cmp	r3, #0
 800183a:	da09      	bge.n	8001850 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	333b      	adds	r3, #59	; 0x3b
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e008      	b.n	8001862 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	212c      	movs	r1, #44	; 0x2c
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	333b      	adds	r3, #59	; 0x3b
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	212c      	movs	r1, #44	; 0x2c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	333c      	adds	r3, #60	; 0x3c
 8001870:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001874:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6818      	ldr	r0, [r3, #0]
 800187a:	787c      	ldrb	r4, [r7, #1]
 800187c:	78ba      	ldrb	r2, [r7, #2]
 800187e:	78f9      	ldrb	r1, [r7, #3]
 8001880:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4623      	mov	r3, r4
 8001892:	f003 fac5 	bl	8004e20 <USB_HC_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}

080018ac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_HCD_HC_Halt+0x1e>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e00f      	b.n	80018ea <HAL_HCD_HC_Halt+0x3e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f003 fd15 	bl	800530a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4603      	mov	r3, r0
 8001904:	70fb      	strb	r3, [r7, #3]
 8001906:	460b      	mov	r3, r1
 8001908:	70bb      	strb	r3, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	333b      	adds	r3, #59	; 0x3b
 800191c:	78ba      	ldrb	r2, [r7, #2]
 800191e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	333f      	adds	r3, #63	; 0x3f
 800192e:	787a      	ldrb	r2, [r7, #1]
 8001930:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001932:	7c3b      	ldrb	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d112      	bne.n	800195e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3342      	adds	r3, #66	; 0x42
 8001946:	2203      	movs	r2, #3
 8001948:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	333d      	adds	r3, #61	; 0x3d
 8001958:	7f3a      	ldrb	r2, [r7, #28]
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e008      	b.n	8001970 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3342      	adds	r3, #66	; 0x42
 800196c:	2202      	movs	r2, #2
 800196e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b03      	cmp	r3, #3
 8001974:	f200 80c6 	bhi.w	8001b04 <HAL_HCD_HC_SubmitRequest+0x210>
 8001978:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	08001991 	.word	0x08001991
 8001984:	08001af1 	.word	0x08001af1
 8001988:	080019f5 	.word	0x080019f5
 800198c:	08001a73 	.word	0x08001a73
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001990:	7c3b      	ldrb	r3, [r7, #16]
 8001992:	2b01      	cmp	r3, #1
 8001994:	f040 80b8 	bne.w	8001b08 <HAL_HCD_HC_SubmitRequest+0x214>
 8001998:	78bb      	ldrb	r3, [r7, #2]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f040 80b4 	bne.w	8001b08 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019a0:	8b3b      	ldrh	r3, [r7, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d108      	bne.n	80019b8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	212c      	movs	r1, #44	; 0x2c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3355      	adds	r3, #85	; 0x55
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3355      	adds	r3, #85	; 0x55
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3342      	adds	r3, #66	; 0x42
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019de:	e093      	b.n	8001b08 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3342      	adds	r3, #66	; 0x42
 80019ee:	2202      	movs	r2, #2
 80019f0:	701a      	strb	r2, [r3, #0]
      break;
 80019f2:	e089      	b.n	8001b08 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019f4:	78bb      	ldrb	r3, [r7, #2]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d11d      	bne.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	212c      	movs	r1, #44	; 0x2c
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	3355      	adds	r3, #85	; 0x55
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3342      	adds	r3, #66	; 0x42
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a20:	e073      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	212c      	movs	r1, #44	; 0x2c
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3342      	adds	r3, #66	; 0x42
 8001a30:	2202      	movs	r2, #2
 8001a32:	701a      	strb	r2, [r3, #0]
      break;
 8001a34:	e069      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	3354      	adds	r3, #84	; 0x54
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3342      	adds	r3, #66	; 0x42
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
      break;
 8001a5c:	e055      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	3342      	adds	r3, #66	; 0x42
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	701a      	strb	r2, [r3, #0]
      break;
 8001a70:	e04b      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a72:	78bb      	ldrb	r3, [r7, #2]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d11d      	bne.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3355      	adds	r3, #85	; 0x55
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3342      	adds	r3, #66	; 0x42
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a9e:	e034      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3342      	adds	r3, #66	; 0x42
 8001aae:	2202      	movs	r2, #2
 8001ab0:	701a      	strb	r2, [r3, #0]
      break;
 8001ab2:	e02a      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3354      	adds	r3, #84	; 0x54
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3342      	adds	r3, #66	; 0x42
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
      break;
 8001ada:	e016      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3342      	adds	r3, #66	; 0x42
 8001aea:	2202      	movs	r2, #2
 8001aec:	701a      	strb	r2, [r3, #0]
      break;
 8001aee:	e00c      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	212c      	movs	r1, #44	; 0x2c
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	3342      	adds	r3, #66	; 0x42
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
      break;
 8001b02:	e002      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b04:	bf00      	nop
 8001b06:	e000      	b.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b08:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	3344      	adds	r3, #68	; 0x44
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b1c:	78fb      	ldrb	r3, [r7, #3]
 8001b1e:	8b3a      	ldrh	r2, [r7, #24]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	202c      	movs	r0, #44	; 0x2c
 8001b24:	fb00 f303 	mul.w	r3, r0, r3
 8001b28:	440b      	add	r3, r1
 8001b2a:	334c      	adds	r3, #76	; 0x4c
 8001b2c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3360      	adds	r3, #96	; 0x60
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	212c      	movs	r1, #44	; 0x2c
 8001b46:	fb01 f303 	mul.w	r3, r1, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3350      	adds	r3, #80	; 0x50
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3339      	adds	r3, #57	; 0x39
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3361      	adds	r3, #97	; 0x61
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	222c      	movs	r2, #44	; 0x2c
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	3338      	adds	r3, #56	; 0x38
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	18d1      	adds	r1, r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f003 fa68 	bl	8005064 <USB_HC_StartXfer>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop

08001ba0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 ff93 	bl	8004ae2 <USB_GetMode>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	f040 80f6 	bne.w	8001db0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 ff77 	bl	8004abc <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80ec 	beq.w	8001dae <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 ff6e 	bl	8004abc <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bea:	d104      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 ff5e 	bl	8004abc <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c0a:	d104      	bne.n	8001c16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 ff4e 	bl	8004abc <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c2a:	d104      	bne.n	8001c36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 ff3e 	bl	8004abc <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d103      	bne.n	8001c52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f002 ff30 	bl	8004abc <USB_ReadInterrupts>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c66:	d11c      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c82:	2110      	movs	r1, #16
 8001c84:	6938      	ldr	r0, [r7, #16]
 8001c86:	f002 fe1f 	bl	80048c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c8a:	6938      	ldr	r0, [r7, #16]
 8001c8c:	f002 fe50 	bl	8004930 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 f826 	bl	8004ce8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f004 fe2f 	bl	8006900 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f002 ff08 	bl	8004abc <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb6:	d102      	bne.n	8001cbe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f001 f882 	bl	8002dc2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fefa 	bl	8004abc <USB_ReadInterrupts>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d106      	bne.n	8001ce0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f004 fdf8 	bl	80068c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2208      	movs	r2, #8
 8001cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fee9 	bl	8004abc <USB_ReadInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b10      	cmp	r3, #16
 8001cf2:	d101      	bne.n	8001cf8 <HAL_HCD_IRQHandler+0x158>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_HCD_IRQHandler+0x15a>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d012      	beq.n	8001d24 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0210 	bic.w	r2, r2, #16
 8001d0c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 ff85 	bl	8002c1e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0210 	orr.w	r2, r2, #16
 8001d22:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f002 fec7 	bl	8004abc <USB_ReadInterrupts>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d38:	d13a      	bne.n	8001db0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fad2 	bl	80052e8 <USB_HC_ReadInterrupt>
 8001d44:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	e025      	b.n	8001d98 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d018      	beq.n	8001d92 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d76:	d106      	bne.n	8001d86 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f88f 	bl	8001ea2 <HCD_HC_IN_IRQHandler>
 8001d84:	e005      	b.n	8001d92 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 fbdd 	bl	800254c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3d4      	bcc.n	8001d4c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	e000      	b.n	8001db0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001dae:	bf00      	nop
    }
  }
}
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_HCD_Start+0x16>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e013      	b.n	8001df4 <HAL_HCD_Start+0x3e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f002 ffbe 	bl	8004d5c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 fd01 	bl	80047ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_HCD_Stop+0x16>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e00d      	b.n	8001e2e <HAL_HCD_Stop+0x32>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fbac 	bl	800557c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	212c      	movs	r1, #44	; 0x2c
 8001e48:	fb01 f303 	mul.w	r3, r1, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3360      	adds	r3, #96	; 0x60
 8001e50:	781b      	ldrb	r3, [r3, #0]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	3350      	adds	r3, #80	; 0x50
 8001e78:	681b      	ldr	r3, [r3, #0]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 ffb2 	bl	8004dfc <USB_GetCurrentFrame>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d11a      	bne.n	8001f08 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3361      	adds	r3, #97	; 0x61
 8001ef2:	2206      	movs	r2, #6
 8001ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fa02 	bl	800530a <USB_HC_Halt>
 8001f06:	e0af      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1e:	d11b      	bne.n	8001f58 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	212c      	movs	r1, #44	; 0x2c
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3361      	adds	r3, #97	; 0x61
 8001f42:	2207      	movs	r2, #7
 8001f44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 f9da 	bl	800530a <USB_HC_Halt>
 8001f56:	e087      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d109      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	6093      	str	r3, [r2, #8]
 8001f80:	e072      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d11a      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3361      	adds	r3, #97	; 0x61
 8001fb8:	2205      	movs	r2, #5
 8001fba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 f99f 	bl	800530a <USB_HC_Halt>
 8001fcc:	e04c      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe4:	d11b      	bne.n	800201e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	212c      	movs	r1, #44	; 0x2c
 8002000:	fb01 f303 	mul.w	r3, r1, r3
 8002004:	4413      	add	r3, r2
 8002006:	3361      	adds	r3, #97	; 0x61
 8002008:	2208      	movs	r2, #8
 800200a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f003 f977 	bl	800530a <USB_HC_Halt>
 800201c:	e024      	b.n	8002068 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002030:	2b80      	cmp	r3, #128	; 0x80
 8002032:	d119      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	212c      	movs	r1, #44	; 0x2c
 800204c:	fb01 f303 	mul.w	r3, r1, r3
 8002050:	4413      	add	r3, r2
 8002052:	3361      	adds	r3, #97	; 0x61
 8002054:	2206      	movs	r2, #6
 8002056:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f003 f951 	bl	800530a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800207e:	d112      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f003 f93d 	bl	800530a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	461a      	mov	r2, r3
 800209e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020a4:	e24e      	b.n	8002544 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	f040 80df 	bne.w	800227c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d019      	beq.n	80020fa <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3348      	adds	r3, #72	; 0x48
 80020d4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	0159      	lsls	r1, r3, #5
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	440b      	add	r3, r1
 80020de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020e8:	1ad2      	subs	r2, r2, r3
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	202c      	movs	r0, #44	; 0x2c
 80020f0:	fb00 f303 	mul.w	r3, r0, r3
 80020f4:	440b      	add	r3, r1
 80020f6:	3350      	adds	r3, #80	; 0x50
 80020f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3361      	adds	r3, #97	; 0x61
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	335c      	adds	r3, #92	; 0x5c
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	461a      	mov	r2, r3
 800212c:	2301      	movs	r3, #1
 800212e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	333f      	adds	r3, #63	; 0x3f
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	333f      	adds	r3, #63	; 0x3f
 8002152:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002154:	2b02      	cmp	r3, #2
 8002156:	d111      	bne.n	800217c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f003 f8d1 	bl	800530a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	461a      	mov	r2, r3
 8002176:	2310      	movs	r3, #16
 8002178:	6093      	str	r3, [r2, #8]
 800217a:	e03a      	b.n	80021f2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	333f      	adds	r3, #63	; 0x3f
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d009      	beq.n	80021a4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	333f      	adds	r3, #63	; 0x3f
 800219e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d126      	bne.n	80021f2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	0151      	lsls	r1, r2, #5
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	440a      	add	r2, r1
 80021ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3360      	adds	r3, #96	; 0x60
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	b2d9      	uxtb	r1, r3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	202c      	movs	r0, #44	; 0x2c
 80021e0:	fb00 f303 	mul.w	r3, r0, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f004 fb95 	bl	800691c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d12b      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3348      	adds	r3, #72	; 0x48
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	202c      	movs	r0, #44	; 0x2c
 8002210:	fb00 f202 	mul.w	r2, r0, r2
 8002214:	440a      	add	r2, r1
 8002216:	3240      	adds	r2, #64	; 0x40
 8002218:	8812      	ldrh	r2, [r2, #0]
 800221a:	fbb3 f3f2 	udiv	r3, r3, r2
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 818e 	beq.w	8002544 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	3354      	adds	r3, #84	; 0x54
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2d8      	uxtb	r0, r3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3354      	adds	r3, #84	; 0x54
 800224c:	4602      	mov	r2, r0
 800224e:	701a      	strb	r2, [r3, #0]
}
 8002250:	e178      	b.n	8002544 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3354      	adds	r3, #84	; 0x54
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3354      	adds	r3, #84	; 0x54
 8002276:	4602      	mov	r2, r0
 8002278:	701a      	strb	r2, [r3, #0]
}
 800227a:	e163      	b.n	8002544 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	f040 80f6 	bne.w	8002480 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	212c      	movs	r1, #44	; 0x2c
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	4413      	add	r3, r2
 80022a0:	3361      	adds	r3, #97	; 0x61
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d109      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3360      	adds	r3, #96	; 0x60
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e0c9      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3361      	adds	r3, #97	; 0x61
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d109      	bne.n	80022e4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	3360      	adds	r3, #96	; 0x60
 80022de:	2205      	movs	r2, #5
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e0b5      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3361      	adds	r3, #97	; 0x61
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b06      	cmp	r3, #6
 80022f6:	d009      	beq.n	800230c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3361      	adds	r3, #97	; 0x61
 8002306:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002308:	2b08      	cmp	r3, #8
 800230a:	d150      	bne.n	80023ae <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	335c      	adds	r3, #92	; 0x5c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	202c      	movs	r0, #44	; 0x2c
 8002324:	fb00 f303 	mul.w	r3, r0, r3
 8002328:	440b      	add	r3, r1
 800232a:	335c      	adds	r3, #92	; 0x5c
 800232c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	335c      	adds	r3, #92	; 0x5c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d912      	bls.n	8002368 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	335c      	adds	r3, #92	; 0x5c
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3360      	adds	r3, #96	; 0x60
 8002362:	2204      	movs	r2, #4
 8002364:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002366:	e073      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3360      	adds	r3, #96	; 0x60
 8002376:	2202      	movs	r2, #2
 8002378:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002390:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002398:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023ac:	e050      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	3361      	adds	r3, #97	; 0x61
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d122      	bne.n	8002408 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3360      	adds	r3, #96	; 0x60
 80023d0:	2202      	movs	r2, #2
 80023d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e023      	b.n	8002450 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3361      	adds	r3, #97	; 0x61
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b07      	cmp	r3, #7
 800241a:	d119      	bne.n	8002450 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	335c      	adds	r3, #92	; 0x5c
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	202c      	movs	r0, #44	; 0x2c
 8002434:	fb00 f303 	mul.w	r3, r0, r3
 8002438:	440b      	add	r3, r1
 800243a:	335c      	adds	r3, #92	; 0x5c
 800243c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3360      	adds	r3, #96	; 0x60
 800244c:	2204      	movs	r2, #4
 800244e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2302      	movs	r3, #2
 8002460:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	b2d9      	uxtb	r1, r3
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	202c      	movs	r0, #44	; 0x2c
 800246c:	fb00 f303 	mul.w	r3, r0, r3
 8002470:	4413      	add	r3, r2
 8002472:	3360      	adds	r3, #96	; 0x60
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f004 fa4f 	bl	800691c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800247e:	e061      	b.n	8002544 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b10      	cmp	r3, #16
 8002494:	d156      	bne.n	8002544 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	333f      	adds	r3, #63	; 0x3f
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d111      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	335c      	adds	r3, #92	; 0x5c
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	4611      	mov	r1, r2
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 ff1f 	bl	800530a <USB_HC_Halt>
 80024cc:	e031      	b.n	8002532 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	333f      	adds	r3, #63	; 0x3f
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	333f      	adds	r3, #63	; 0x3f
 80024f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d11d      	bne.n	8002532 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	335c      	adds	r3, #92	; 0x5c
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d110      	bne.n	8002532 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	2203      	movs	r2, #3
 8002520:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f002 feec 	bl	800530a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	461a      	mov	r2, r3
 8002540:	2310      	movs	r3, #16
 8002542:	6093      	str	r3, [r2, #8]
}
 8002544:	bf00      	nop
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b04      	cmp	r3, #4
 800257a:	d11a      	bne.n	80025b2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	461a      	mov	r2, r3
 800258a:	2304      	movs	r3, #4
 800258c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3361      	adds	r3, #97	; 0x61
 800259c:	2206      	movs	r2, #6
 800259e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fead 	bl	800530a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80025b0:	e331      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d12e      	bne.n	8002626 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	2320      	movs	r3, #32
 80025d8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	333d      	adds	r3, #61	; 0x3d
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	f040 8313 	bne.w	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	333d      	adds	r3, #61	; 0x3d
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3360      	adds	r3, #96	; 0x60
 8002610:	2202      	movs	r2, #2
 8002612:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fe73 	bl	800530a <USB_HC_Halt>
}
 8002624:	e2f7      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263c:	d112      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	461a      	mov	r2, r3
 800264c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002650:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f002 fe54 	bl	800530a <USB_HC_Halt>
}
 8002662:	e2d8      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d140      	bne.n	80026fc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d111      	bne.n	80026c6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	333d      	adds	r3, #61	; 0x3d
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3361      	adds	r3, #97	; 0x61
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fe08 	bl	800530a <USB_HC_Halt>
}
 80026fa:	e28c      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d12c      	bne.n	800276c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3361      	adds	r3, #97	; 0x61
 8002720:	2204      	movs	r2, #4
 8002722:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	212c      	movs	r1, #44	; 0x2c
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	4413      	add	r3, r2
 8002730:	333d      	adds	r3, #61	; 0x3d
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	335c      	adds	r3, #92	; 0x5c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fdd9 	bl	800530a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	461a      	mov	r2, r3
 8002766:	2340      	movs	r3, #64	; 0x40
 8002768:	6093      	str	r3, [r2, #8]
}
 800276a:	e254      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d11a      	bne.n	80027b8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	461a      	mov	r2, r3
 8002790:	2308      	movs	r3, #8
 8002792:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3361      	adds	r3, #97	; 0x61
 80027a2:	2205      	movs	r2, #5
 80027a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f002 fdaa 	bl	800530a <USB_HC_Halt>
}
 80027b6:	e22e      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d140      	bne.n	8002850 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	335c      	adds	r3, #92	; 0x5c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3361      	adds	r3, #97	; 0x61
 80027ee:	2203      	movs	r2, #3
 80027f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333d      	adds	r3, #61	; 0x3d
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d112      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	333c      	adds	r3, #60	; 0x3c
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	333d      	adds	r3, #61	; 0x3d
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fd67 	bl	800530a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002848:	461a      	mov	r2, r3
 800284a:	2310      	movs	r3, #16
 800284c:	6093      	str	r3, [r2, #8]
}
 800284e:	e1e2      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002862:	2b80      	cmp	r3, #128	; 0x80
 8002864:	d164      	bne.n	8002930 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d111      	bne.n	8002892 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3361      	adds	r3, #97	; 0x61
 800287c:	2206      	movs	r2, #6
 800287e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f002 fd3d 	bl	800530a <USB_HC_Halt>
 8002890:	e044      	b.n	800291c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	202c      	movs	r0, #44	; 0x2c
 80028aa:	fb00 f303 	mul.w	r3, r0, r3
 80028ae:	440b      	add	r3, r1
 80028b0:	335c      	adds	r3, #92	; 0x5c
 80028b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	335c      	adds	r3, #92	; 0x5c
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d920      	bls.n	800290a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	335c      	adds	r3, #92	; 0x5c
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3360      	adds	r3, #96	; 0x60
 80028e8:	2204      	movs	r2, #4
 80028ea:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	b2d9      	uxtb	r1, r3
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	202c      	movs	r0, #44	; 0x2c
 80028f6:	fb00 f303 	mul.w	r3, r0, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3360      	adds	r3, #96	; 0x60
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f004 f80a 	bl	800691c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002908:	e008      	b.n	800291c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3360      	adds	r3, #96	; 0x60
 8002918:	2202      	movs	r2, #2
 800291a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	6093      	str	r3, [r2, #8]
}
 800292e:	e172      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d11b      	bne.n	8002980 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3361      	adds	r3, #97	; 0x61
 8002956:	2208      	movs	r2, #8
 8002958:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fcd0 	bl	800530a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	461a      	mov	r2, r3
 8002978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297c:	6093      	str	r3, [r2, #8]
}
 800297e:	e14a      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	f040 813f 	bne.w	8002c16 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3361      	adds	r3, #97	; 0x61
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d17d      	bne.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3360      	adds	r3, #96	; 0x60
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	333f      	adds	r3, #63	; 0x3f
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d00a      	beq.n	80029e8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	333f      	adds	r3, #63	; 0x3f
 80029e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	f040 8100 	bne.w	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d113      	bne.n	8002a18 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3355      	adds	r3, #85	; 0x55
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	f083 0301 	eor.w	r3, r3, #1
 8002a04:	b2d8      	uxtb	r0, r3
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3355      	adds	r3, #85	; 0x55
 8002a14:	4602      	mov	r2, r0
 8002a16:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	f040 80e3 	bne.w	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	334c      	adds	r3, #76	; 0x4c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 80d8 	beq.w	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	334c      	adds	r3, #76	; 0x4c
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	202c      	movs	r0, #44	; 0x2c
 8002a4e:	fb00 f202 	mul.w	r2, r0, r2
 8002a52:	440a      	add	r2, r1
 8002a54:	3240      	adds	r2, #64	; 0x40
 8002a56:	8812      	ldrh	r2, [r2, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	202c      	movs	r0, #44	; 0x2c
 8002a62:	fb00 f202 	mul.w	r2, r0, r2
 8002a66:	440a      	add	r2, r1
 8002a68:	3240      	adds	r2, #64	; 0x40
 8002a6a:	8812      	ldrh	r2, [r2, #0]
 8002a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80b5 	beq.w	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3355      	adds	r3, #85	; 0x55
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2d8      	uxtb	r0, r3
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3355      	adds	r3, #85	; 0x55
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e09f      	b.n	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3361      	adds	r3, #97	; 0x61
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d109      	bne.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3360      	adds	r3, #96	; 0x60
 8002aca:	2202      	movs	r2, #2
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e08b      	b.n	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3361      	adds	r3, #97	; 0x61
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d109      	bne.n	8002af8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3360      	adds	r3, #96	; 0x60
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e077      	b.n	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	3361      	adds	r3, #97	; 0x61
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d109      	bne.n	8002b20 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3360      	adds	r3, #96	; 0x60
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e063      	b.n	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3361      	adds	r3, #97	; 0x61
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b06      	cmp	r3, #6
 8002b32:	d009      	beq.n	8002b48 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3361      	adds	r3, #97	; 0x61
 8002b42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d14f      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	335c      	adds	r3, #92	; 0x5c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	202c      	movs	r0, #44	; 0x2c
 8002b60:	fb00 f303 	mul.w	r3, r0, r3
 8002b64:	440b      	add	r3, r1
 8002b66:	335c      	adds	r3, #92	; 0x5c
 8002b68:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	335c      	adds	r3, #92	; 0x5c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d912      	bls.n	8002ba4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	335c      	adds	r3, #92	; 0x5c
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3360      	adds	r3, #96	; 0x60
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	701a      	strb	r2, [r3, #0]
 8002ba2:	e021      	b.n	8002be8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3360      	adds	r3, #96	; 0x60
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bcc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bd4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	b2d9      	uxtb	r1, r3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	202c      	movs	r0, #44	; 0x2c
 8002c04:	fb00 f303 	mul.w	r3, r0, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3360      	adds	r3, #96	; 0x60
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f003 fe83 	bl	800691c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c16:	bf00      	nop
 8002c18:	3720      	adds	r7, #32
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b08a      	sub	sp, #40	; 0x28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	0c5b      	lsrs	r3, r3, #17
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c52:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d004      	beq.n	8002c64 <HCD_RXQLVL_IRQHandler+0x46>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	f000 80a9 	beq.w	8002db4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c62:	e0aa      	b.n	8002dba <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80a6 	beq.w	8002db8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3344      	adds	r3, #68	; 0x44
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 809b 	beq.w	8002db8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3350      	adds	r3, #80	; 0x50
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	441a      	add	r2, r3
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	202c      	movs	r0, #44	; 0x2c
 8002c9c:	fb00 f303 	mul.w	r3, r0, r3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	334c      	adds	r3, #76	; 0x4c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d87a      	bhi.n	8002da0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3344      	adds	r3, #68	; 0x44
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	b292      	uxth	r2, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f001 fea2 	bl	8004a0c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3344      	adds	r3, #68	; 0x44
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	441a      	add	r2, r3
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	202c      	movs	r0, #44	; 0x2c
 8002ce2:	fb00 f303 	mul.w	r3, r0, r3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3344      	adds	r3, #68	; 0x44
 8002cea:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3350      	adds	r3, #80	; 0x50
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	441a      	add	r2, r3
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	202c      	movs	r0, #44	; 0x2c
 8002d06:	fb00 f303 	mul.w	r3, r0, r3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3350      	adds	r3, #80	; 0x50
 8002d0e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	0cdb      	lsrs	r3, r3, #19
 8002d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d24:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3340      	adds	r3, #64	; 0x40
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d13c      	bne.n	8002db8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d039      	beq.n	8002db8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d5a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d62:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3354      	adds	r3, #84	; 0x54
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2d8      	uxtb	r0, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3354      	adds	r3, #84	; 0x54
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	701a      	strb	r2, [r3, #0]
      break;
 8002d9e:	e00b      	b.n	8002db8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3360      	adds	r3, #96	; 0x60
 8002dae:	2204      	movs	r2, #4
 8002db0:	701a      	strb	r2, [r3, #0]
      break;
 8002db2:	e001      	b.n	8002db8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002db8:	bf00      	nop
  }
}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	; 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d10b      	bne.n	8002e12 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d102      	bne.n	8002e0a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f003 fd6d 	bl	80068e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d132      	bne.n	8002e82 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f043 0308 	orr.w	r3, r3, #8
 8002e22:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d126      	bne.n	8002e7c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d113      	bne.n	8002e5e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e40:	d106      	bne.n	8002e50 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 ff4d 	bl	8004ce8 <USB_InitFSLSPClkSel>
 8002e4e:	e011      	b.n	8002e74 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 ff46 	bl	8004ce8 <USB_InitFSLSPClkSel>
 8002e5c:	e00a      	b.n	8002e74 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d106      	bne.n	8002e74 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e72:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f003 fd5f 	bl	8006938 <HAL_HCD_PortEnabled_Callback>
 8002e7a:	e002      	b.n	8002e82 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f003 fd69 	bl	8006954 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d103      	bne.n	8002e94 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f043 0320 	orr.w	r3, r3, #32
 8002e92:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e12b      	b.n	8003112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fd fe9a 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	; 0x24
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f0c:	f001 fa20 	bl	8004350 <HAL_RCC_GetPCLK1Freq>
 8002f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a81      	ldr	r2, [pc, #516]	; (800311c <HAL_I2C_Init+0x274>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d807      	bhi.n	8002f2c <HAL_I2C_Init+0x84>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a80      	ldr	r2, [pc, #512]	; (8003120 <HAL_I2C_Init+0x278>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	bf94      	ite	ls
 8002f24:	2301      	movls	r3, #1
 8002f26:	2300      	movhi	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	e006      	b.n	8002f3a <HAL_I2C_Init+0x92>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a7d      	ldr	r2, [pc, #500]	; (8003124 <HAL_I2C_Init+0x27c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	bf94      	ite	ls
 8002f34:	2301      	movls	r3, #1
 8002f36:	2300      	movhi	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0e7      	b.n	8003112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a78      	ldr	r2, [pc, #480]	; (8003128 <HAL_I2C_Init+0x280>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0c9b      	lsrs	r3, r3, #18
 8002f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a6a      	ldr	r2, [pc, #424]	; (800311c <HAL_I2C_Init+0x274>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d802      	bhi.n	8002f7c <HAL_I2C_Init+0xd4>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	e009      	b.n	8002f90 <HAL_I2C_Init+0xe8>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	4a69      	ldr	r2, [pc, #420]	; (800312c <HAL_I2C_Init+0x284>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	3301      	adds	r3, #1
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fa2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	495c      	ldr	r1, [pc, #368]	; (800311c <HAL_I2C_Init+0x274>)
 8002fac:	428b      	cmp	r3, r1
 8002fae:	d819      	bhi.n	8002fe4 <HAL_I2C_Init+0x13c>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1e59      	subs	r1, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fbe:	1c59      	adds	r1, r3, #1
 8002fc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fc4:	400b      	ands	r3, r1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_I2C_Init+0x138>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1e59      	subs	r1, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fde:	e051      	b.n	8003084 <HAL_I2C_Init+0x1dc>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	e04f      	b.n	8003084 <HAL_I2C_Init+0x1dc>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d111      	bne.n	8003010 <HAL_I2C_Init+0x168>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	440b      	add	r3, r1
 8002ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf0c      	ite	eq
 8003008:	2301      	moveq	r3, #1
 800300a:	2300      	movne	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e012      	b.n	8003036 <HAL_I2C_Init+0x18e>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e58      	subs	r0, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	0099      	lsls	r1, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Init+0x196>
 800303a:	2301      	movs	r3, #1
 800303c:	e022      	b.n	8003084 <HAL_I2C_Init+0x1dc>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10e      	bne.n	8003064 <HAL_I2C_Init+0x1bc>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1e58      	subs	r0, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6859      	ldr	r1, [r3, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	440b      	add	r3, r1
 8003054:	fbb0 f3f3 	udiv	r3, r0, r3
 8003058:	3301      	adds	r3, #1
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003062:	e00f      	b.n	8003084 <HAL_I2C_Init+0x1dc>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	0099      	lsls	r1, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	6809      	ldr	r1, [r1, #0]
 8003088:	4313      	orrs	r3, r2
 800308a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6911      	ldr	r1, [r2, #16]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68d2      	ldr	r2, [r2, #12]
 80030be:	4311      	orrs	r1, r2
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	000186a0 	.word	0x000186a0
 8003120:	001e847f 	.word	0x001e847f
 8003124:	003d08ff 	.word	0x003d08ff
 8003128:	431bde83 	.word	0x431bde83
 800312c:	10624dd3 	.word	0x10624dd3

08003130 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e128      	b.n	8003394 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a90      	ldr	r2, [pc, #576]	; (800339c <HAL_I2S_Init+0x26c>)
 800315a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7fd fd9b 	bl	8000c98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003178:	f023 030f 	bic.w	r3, r3, #15
 800317c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2202      	movs	r2, #2
 8003184:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d060      	beq.n	8003250 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003196:	2310      	movs	r3, #16
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e001      	b.n	80031a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d802      	bhi.n	80031ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f001 f9d2 	bl	8004558 <HAL_RCCEx_GetPeriphCLKFreq>
 80031b4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031be:	d125      	bne.n	800320c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	3305      	adds	r3, #5
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	e01f      	b.n	800322a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	3305      	adds	r3, #5
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e00e      	b.n	800322a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fbb2 f2f3 	udiv	r2, r2, r3
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	3305      	adds	r3, #5
 8003228:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4a5c      	ldr	r2, [pc, #368]	; (80033a0 <HAL_I2S_Init+0x270>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	08db      	lsrs	r3, r3, #3
 8003234:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	e003      	b.n	8003258 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003250:	2302      	movs	r3, #2
 8003252:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d902      	bls.n	8003264 <HAL_I2S_Init+0x134>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	2bff      	cmp	r3, #255	; 0xff
 8003262:	d907      	bls.n	8003274 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e08f      	b.n	8003394 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	ea42 0103 	orr.w	r1, r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	430a      	orrs	r2, r1
 8003286:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003292:	f023 030f 	bic.w	r3, r3, #15
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6851      	ldr	r1, [r2, #4]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68d2      	ldr	r2, [r2, #12]
 80032a4:	4311      	orrs	r1, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6992      	ldr	r2, [r2, #24]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032b6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d161      	bne.n	8003384 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a38      	ldr	r2, [pc, #224]	; (80033a4 <HAL_I2S_Init+0x274>)
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a37      	ldr	r2, [pc, #220]	; (80033a8 <HAL_I2S_Init+0x278>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_I2S_Init+0x1a4>
 80032d0:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_I2S_Init+0x27c>)
 80032d2:	e001      	b.n	80032d8 <HAL_I2S_Init+0x1a8>
 80032d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	4932      	ldr	r1, [pc, #200]	; (80033a8 <HAL_I2S_Init+0x278>)
 80032e0:	428a      	cmp	r2, r1
 80032e2:	d101      	bne.n	80032e8 <HAL_I2S_Init+0x1b8>
 80032e4:	4a31      	ldr	r2, [pc, #196]	; (80033ac <HAL_I2S_Init+0x27c>)
 80032e6:	e001      	b.n	80032ec <HAL_I2S_Init+0x1bc>
 80032e8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032ec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032f0:	f023 030f 	bic.w	r3, r3, #15
 80032f4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <HAL_I2S_Init+0x278>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d101      	bne.n	8003304 <HAL_I2S_Init+0x1d4>
 8003300:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_I2S_Init+0x27c>)
 8003302:	e001      	b.n	8003308 <HAL_I2S_Init+0x1d8>
 8003304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003308:	2202      	movs	r2, #2
 800330a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <HAL_I2S_Init+0x278>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_I2S_Init+0x1ea>
 8003316:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_I2S_Init+0x27c>)
 8003318:	e001      	b.n	800331e <HAL_I2S_Init+0x1ee>
 800331a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332a:	d003      	beq.n	8003334 <HAL_I2S_Init+0x204>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e001      	b.n	8003340 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800334a:	4313      	orrs	r3, r2
 800334c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003354:	4313      	orrs	r3, r2
 8003356:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800335e:	4313      	orrs	r3, r2
 8003360:	b29a      	uxth	r2, r3
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	4313      	orrs	r3, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800336c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a0d      	ldr	r2, [pc, #52]	; (80033a8 <HAL_I2S_Init+0x278>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_I2S_Init+0x24c>
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_I2S_Init+0x27c>)
 800337a:	e001      	b.n	8003380 <HAL_I2S_Init+0x250>
 800337c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003380:	897a      	ldrh	r2, [r7, #10]
 8003382:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	080034a7 	.word	0x080034a7
 80033a0:	cccccccd 	.word	0xcccccccd
 80033a4:	080035bd 	.word	0x080035bd
 80033a8:	40003800 	.word	0x40003800
 80033ac:	40003400 	.word	0x40003400

080033b0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	881a      	ldrh	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10e      	bne.n	8003440 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003430:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff ffb8 	bl	80033b0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	b292      	uxth	r2, r2
 800345c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	1c9a      	adds	r2, r3, #2
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800346c:	b29b      	uxth	r3, r3
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10e      	bne.n	800349e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ff93 	bl	80033c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d13a      	bne.n	8003538 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d109      	bne.n	80034e0 <I2S_IRQHandler+0x3a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d102      	bne.n	80034e0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ffb4 	bl	8003448 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d126      	bne.n	8003538 <I2S_IRQHandler+0x92>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d11f      	bne.n	8003538 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003506:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ff50 	bl	80033d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b03      	cmp	r3, #3
 8003542:	d136      	bne.n	80035b2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d109      	bne.n	8003562 <I2S_IRQHandler+0xbc>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d102      	bne.n	8003562 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff45 	bl	80033ec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d122      	bne.n	80035b2 <I2S_IRQHandler+0x10c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b20      	cmp	r3, #32
 8003578:	d11b      	bne.n	80035b2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003588:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff13 	bl	80033d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a92      	ldr	r2, [pc, #584]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035d6:	4b92      	ldr	r3, [pc, #584]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d8:	e001      	b.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a8b      	ldr	r2, [pc, #556]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035f4:	4b8a      	ldr	r3, [pc, #552]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f6:	e001      	b.n	80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003608:	d004      	beq.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 8099 	bne.w	8003746 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b02      	cmp	r3, #2
 800361c:	d107      	bne.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f925 	bl	8003878 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f9c8 	bl	80039d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d13a      	bne.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d035      	beq.n	80036c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a6e      	ldr	r2, [pc, #440]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003666:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003668:	e001      	b.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800366a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4969      	ldr	r1, [pc, #420]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003676:	428b      	cmp	r3, r1
 8003678:	d101      	bne.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800367a:	4b69      	ldr	r3, [pc, #420]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800367c:	e001      	b.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800367e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003682:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003686:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003696:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ba:	f043 0202 	orr.w	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fe88 	bl	80033d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	f040 80c3 	bne.w	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80bd 	beq.w	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a49      	ldr	r2, [pc, #292]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036fa:	4b49      	ldr	r3, [pc, #292]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036fc:	e001      	b.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4944      	ldr	r1, [pc, #272]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800370a:	428b      	cmp	r3, r1
 800370c:	d101      	bne.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800370e:	4b44      	ldr	r3, [pc, #272]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003710:	e001      	b.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003716:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800371a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fe4a 	bl	80033d8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003744:	e089      	b.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b02      	cmp	r3, #2
 800374e:	d107      	bne.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8be 	bl	80038dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d107      	bne.n	800377a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f8fd 	bl	8003974 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b40      	cmp	r3, #64	; 0x40
 8003782:	d12f      	bne.n	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d02a      	beq.n	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800379c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d101      	bne.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037a8:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037aa:	e001      	b.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4919      	ldr	r1, [pc, #100]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b8:	428b      	cmp	r3, r1
 80037ba:	d101      	bne.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037bc:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037be:	e001      	b.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f043 0202 	orr.w	r2, r3, #2
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff fdfa 	bl	80033d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d136      	bne.n	800385c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d031      	beq.n	800385c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a07      	ldr	r2, [pc, #28]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003804:	e001      	b.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4902      	ldr	r1, [pc, #8]	; (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003812:	428b      	cmp	r3, r1
 8003814:	d106      	bne.n	8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003816:	4b02      	ldr	r3, [pc, #8]	; (8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003818:	e006      	b.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800381a:	bf00      	nop
 800381c:	40003800 	.word	0x40003800
 8003820:	40003400 	.word	0x40003400
 8003824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003828:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800382c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f043 0204 	orr.w	r2, r3, #4
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff fdc0 	bl	80033d8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003858:	e000      	b.n	800385c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800385a:	bf00      	nop
}
 800385c:	bf00      	nop
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	1c99      	adds	r1, r3, #2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6251      	str	r1, [r2, #36]	; 0x24
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d113      	bne.n	80038d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ffc9 	bl	8003864 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	1c99      	adds	r1, r3, #2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6251      	str	r1, [r2, #36]	; 0x24
 80038ee:	8819      	ldrh	r1, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <I2SEx_TxISR_I2SExt+0x90>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <I2SEx_TxISR_I2SExt+0x22>
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <I2SEx_TxISR_I2SExt+0x94>)
 80038fc:	e001      	b.n	8003902 <I2SEx_TxISR_I2SExt+0x26>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003902:	460a      	mov	r2, r1
 8003904:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d121      	bne.n	8003962 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a12      	ldr	r2, [pc, #72]	; (800396c <I2SEx_TxISR_I2SExt+0x90>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d101      	bne.n	800392c <I2SEx_TxISR_I2SExt+0x50>
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <I2SEx_TxISR_I2SExt+0x94>)
 800392a:	e001      	b.n	8003930 <I2SEx_TxISR_I2SExt+0x54>
 800392c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	490d      	ldr	r1, [pc, #52]	; (800396c <I2SEx_TxISR_I2SExt+0x90>)
 8003938:	428b      	cmp	r3, r1
 800393a:	d101      	bne.n	8003940 <I2SEx_TxISR_I2SExt+0x64>
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <I2SEx_TxISR_I2SExt+0x94>)
 800393e:	e001      	b.n	8003944 <I2SEx_TxISR_I2SExt+0x68>
 8003940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003944:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003948:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff81 	bl	8003864 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40003800 	.word	0x40003800
 8003970:	40003400 	.word	0x40003400

08003974 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68d8      	ldr	r0, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	1c99      	adds	r1, r3, #2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800398c:	b282      	uxth	r2, r0
 800398e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d113      	bne.n	80039d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff ff4a 	bl	8003864 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a20      	ldr	r2, [pc, #128]	; (8003a68 <I2SEx_RxISR_I2SExt+0x90>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <I2SEx_RxISR_I2SExt+0x16>
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <I2SEx_RxISR_I2SExt+0x94>)
 80039ec:	e001      	b.n	80039f2 <I2SEx_RxISR_I2SExt+0x1a>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f2:	68d8      	ldr	r0, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	1c99      	adds	r1, r3, #2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039fe:	b282      	uxth	r2, r0
 8003a00:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d121      	bne.n	8003a5e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <I2SEx_RxISR_I2SExt+0x90>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <I2SEx_RxISR_I2SExt+0x50>
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <I2SEx_RxISR_I2SExt+0x94>)
 8003a26:	e001      	b.n	8003a2c <I2SEx_RxISR_I2SExt+0x54>
 8003a28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	490d      	ldr	r1, [pc, #52]	; (8003a68 <I2SEx_RxISR_I2SExt+0x90>)
 8003a34:	428b      	cmp	r3, r1
 8003a36:	d101      	bne.n	8003a3c <I2SEx_RxISR_I2SExt+0x64>
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <I2SEx_RxISR_I2SExt+0x94>)
 8003a3a:	e001      	b.n	8003a40 <I2SEx_RxISR_I2SExt+0x68>
 8003a3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a44:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff03 	bl	8003864 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40003800 	.word	0x40003800
 8003a6c:	40003400 	.word	0x40003400

08003a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e267      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d075      	beq.n	8003b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a8e:	4b88      	ldr	r3, [pc, #544]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d00c      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b85      	ldr	r3, [pc, #532]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d112      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa6:	4b82      	ldr	r3, [pc, #520]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	4b7e      	ldr	r3, [pc, #504]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d05b      	beq.n	8003b78 <HAL_RCC_OscConfig+0x108>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d157      	bne.n	8003b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e242      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x74>
 8003ad6:	4b76      	ldr	r3, [pc, #472]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a75      	ldr	r2, [pc, #468]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e01d      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x98>
 8003aee:	4b70      	ldr	r3, [pc, #448]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6f      	ldr	r2, [pc, #444]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6c      	ldr	r2, [pc, #432]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0xb0>
 8003b08:	4b69      	ldr	r3, [pc, #420]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a68      	ldr	r2, [pc, #416]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b66      	ldr	r3, [pc, #408]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a65      	ldr	r2, [pc, #404]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fd fad8 	bl	80010dc <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fd fad4 	bl	80010dc <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e207      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0xc0>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fd fac4 	bl	80010dc <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd fac0 	bl	80010dc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1f3      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	4b51      	ldr	r3, [pc, #324]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0xe8>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9e:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x152>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e1c7      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4937      	ldr	r1, [pc, #220]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	e03a      	b.n	8003c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be0:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <HAL_RCC_OscConfig+0x244>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fd fa79 	bl	80010dc <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fd fa75 	bl	80010dc <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1a8      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4925      	ldr	r1, [pc, #148]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
 8003c20:	e015      	b.n	8003c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c22:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_RCC_OscConfig+0x244>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fd fa58 	bl	80010dc <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fd fa54 	bl	80010dc <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e187      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	4b1b      	ldr	r3, [pc, #108]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d036      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCC_OscConfig+0x248>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fd fa38 	bl	80010dc <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fd fa34 	bl	80010dc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e167      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_OscConfig+0x240>)
 8003c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x200>
 8003c8e:	e01b      	b.n	8003cc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_OscConfig+0x248>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c96:	f7fd fa21 	bl	80010dc <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9c:	e00e      	b.n	8003cbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fd fa1d 	bl	80010dc <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d907      	bls.n	8003cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e150      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	42470000 	.word	0x42470000
 8003cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cbc:	4b88      	ldr	r3, [pc, #544]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ea      	bne.n	8003c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8097 	beq.w	8003e04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4b81      	ldr	r3, [pc, #516]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a7c      	ldr	r2, [pc, #496]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	4b7a      	ldr	r3, [pc, #488]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d06:	4b77      	ldr	r3, [pc, #476]	; (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d118      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d12:	4b74      	ldr	r3, [pc, #464]	; (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a73      	ldr	r2, [pc, #460]	; (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1e:	f7fd f9dd 	bl	80010dc <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d26:	f7fd f9d9 	bl	80010dc <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e10c      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_OscConfig+0x474>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2ea>
 8003d4c:	4b64      	ldr	r3, [pc, #400]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a63      	ldr	r2, [pc, #396]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
 8003d58:	e01c      	b.n	8003d94 <HAL_RCC_OscConfig+0x324>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x30c>
 8003d62:	4b5f      	ldr	r3, [pc, #380]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a5e      	ldr	r2, [pc, #376]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a5b      	ldr	r2, [pc, #364]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0x324>
 8003d7c:	4b58      	ldr	r3, [pc, #352]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	4a57      	ldr	r2, [pc, #348]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	6713      	str	r3, [r2, #112]	; 0x70
 8003d88:	4b55      	ldr	r3, [pc, #340]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	4a54      	ldr	r2, [pc, #336]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003d8e:	f023 0304 	bic.w	r3, r3, #4
 8003d92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fd f99e 	bl	80010dc <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da4:	f7fd f99a 	bl	80010dc <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e0cb      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dba:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0ee      	beq.n	8003da4 <HAL_RCC_OscConfig+0x334>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc8:	f7fd f988 	bl	80010dc <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fd f984 	bl	80010dc <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e0b5      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ee      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df8:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	4a38      	ldr	r2, [pc, #224]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a1 	beq.w	8003f50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e0e:	4b34      	ldr	r3, [pc, #208]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d05c      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d141      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fd f958 	bl	80010dc <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e30:	f7fd f954 	bl	80010dc <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e087      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	085b      	lsrs	r3, r3, #1
 8003e66:	3b01      	subs	r3, #1
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	061b      	lsls	r3, r3, #24
 8003e72:	491b      	ldr	r1, [pc, #108]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fd f92d 	bl	80010dc <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fd f929 	bl	80010dc <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e05c      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x416>
 8003ea4:	e054      	b.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCC_OscConfig+0x478>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fd f916 	bl	80010dc <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fd f912 	bl	80010dc <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e045      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x444>
 8003ed2:	e03d      	b.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e038      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40007000 	.word	0x40007000
 8003ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x4ec>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d028      	beq.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d121      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d11a      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d111      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	3b01      	subs	r3, #1
 8003f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40023800 	.word	0x40023800

08003f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0cc      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f74:	4b68      	ldr	r3, [pc, #416]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d90c      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f82:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b8      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb4:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd8:	4b50      	ldr	r3, [pc, #320]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	494d      	ldr	r1, [pc, #308]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d044      	beq.n	8004080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d119      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d003      	beq.n	800401e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401a:	2b03      	cmp	r3, #3
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	4b3f      	ldr	r3, [pc, #252]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e06f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e067      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403e:	4b37      	ldr	r3, [pc, #220]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 0203 	bic.w	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4934      	ldr	r1, [pc, #208]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	4313      	orrs	r3, r2
 800404e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004050:	f7fd f844 	bl	80010dc <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	e00a      	b.n	800406e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004058:	f7fd f840 	bl	80010dc <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e04f      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	4b2b      	ldr	r3, [pc, #172]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 020c 	and.w	r2, r3, #12
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	429a      	cmp	r2, r3
 800407e:	d1eb      	bne.n	8004058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d20c      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b22      	ldr	r3, [pc, #136]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e032      	b.n	800410e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4916      	ldr	r1, [pc, #88]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	490e      	ldr	r1, [pc, #56]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040e6:	f000 f821 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ea:	4602      	mov	r2, r0
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	490a      	ldr	r1, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x1c0>)
 80040f8:	5ccb      	ldrb	r3, [r1, r3]
 80040fa:	fa22 f303 	lsr.w	r3, r2, r3
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x1c4>)
 8004100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x1c8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc ffa4 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023c00 	.word	0x40023c00
 800411c:	40023800 	.word	0x40023800
 8004120:	08006f78 	.word	0x08006f78
 8004124:	20000000 	.word	0x20000000
 8004128:	20000004 	.word	0x20000004

0800412c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004130:	b094      	sub	sp, #80	; 0x50
 8004132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	647b      	str	r3, [r7, #68]	; 0x44
 8004138:	2300      	movs	r3, #0
 800413a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800413c:	2300      	movs	r3, #0
 800413e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004144:	4b79      	ldr	r3, [pc, #484]	; (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b08      	cmp	r3, #8
 800414e:	d00d      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x40>
 8004150:	2b08      	cmp	r3, #8
 8004152:	f200 80e1 	bhi.w	8004318 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x34>
 800415a:	2b04      	cmp	r3, #4
 800415c:	d003      	beq.n	8004166 <HAL_RCC_GetSysClockFreq+0x3a>
 800415e:	e0db      	b.n	8004318 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b73      	ldr	r3, [pc, #460]	; (8004330 <HAL_RCC_GetSysClockFreq+0x204>)
 8004162:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004164:	e0db      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004166:	4b73      	ldr	r3, [pc, #460]	; (8004334 <HAL_RCC_GetSysClockFreq+0x208>)
 8004168:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800416a:	e0d8      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800416c:	4b6f      	ldr	r3, [pc, #444]	; (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004174:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004176:	4b6d      	ldr	r3, [pc, #436]	; (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d063      	beq.n	800424a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004182:	4b6a      	ldr	r3, [pc, #424]	; (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	099b      	lsrs	r3, r3, #6
 8004188:	2200      	movs	r2, #0
 800418a:	63bb      	str	r3, [r7, #56]	; 0x38
 800418c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004194:	633b      	str	r3, [r7, #48]	; 0x30
 8004196:	2300      	movs	r3, #0
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
 800419a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800419e:	4622      	mov	r2, r4
 80041a0:	462b      	mov	r3, r5
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	0159      	lsls	r1, r3, #5
 80041ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041b0:	0150      	lsls	r0, r2, #5
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4621      	mov	r1, r4
 80041b8:	1a51      	subs	r1, r2, r1
 80041ba:	6139      	str	r1, [r7, #16]
 80041bc:	4629      	mov	r1, r5
 80041be:	eb63 0301 	sbc.w	r3, r3, r1
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041d0:	4659      	mov	r1, fp
 80041d2:	018b      	lsls	r3, r1, #6
 80041d4:	4651      	mov	r1, sl
 80041d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041da:	4651      	mov	r1, sl
 80041dc:	018a      	lsls	r2, r1, #6
 80041de:	4651      	mov	r1, sl
 80041e0:	ebb2 0801 	subs.w	r8, r2, r1
 80041e4:	4659      	mov	r1, fp
 80041e6:	eb63 0901 	sbc.w	r9, r3, r1
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fe:	4690      	mov	r8, r2
 8004200:	4699      	mov	r9, r3
 8004202:	4623      	mov	r3, r4
 8004204:	eb18 0303 	adds.w	r3, r8, r3
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	462b      	mov	r3, r5
 800420c:	eb49 0303 	adc.w	r3, r9, r3
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800421e:	4629      	mov	r1, r5
 8004220:	024b      	lsls	r3, r1, #9
 8004222:	4621      	mov	r1, r4
 8004224:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004228:	4621      	mov	r1, r4
 800422a:	024a      	lsls	r2, r1, #9
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004232:	2200      	movs	r2, #0
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
 8004236:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800423c:	f7fb ffcc 	bl	80001d8 <__aeabi_uldivmod>
 8004240:	4602      	mov	r2, r0
 8004242:	460b      	mov	r3, r1
 8004244:	4613      	mov	r3, r2
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004248:	e058      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424a:	4b38      	ldr	r3, [pc, #224]	; (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	2200      	movs	r2, #0
 8004252:	4618      	mov	r0, r3
 8004254:	4611      	mov	r1, r2
 8004256:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	2300      	movs	r3, #0
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
 8004260:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	f04f 0000 	mov.w	r0, #0
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	0159      	lsls	r1, r3, #5
 8004272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004276:	0150      	lsls	r0, r2, #5
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4641      	mov	r1, r8
 800427e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb63 0b01 	sbc.w	fp, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004294:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004298:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800429c:	ebb2 040a 	subs.w	r4, r2, sl
 80042a0:	eb63 050b 	sbc.w	r5, r3, fp
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	00eb      	lsls	r3, r5, #3
 80042ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042b2:	00e2      	lsls	r2, r4, #3
 80042b4:	4614      	mov	r4, r2
 80042b6:	461d      	mov	r5, r3
 80042b8:	4643      	mov	r3, r8
 80042ba:	18e3      	adds	r3, r4, r3
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	464b      	mov	r3, r9
 80042c0:	eb45 0303 	adc.w	r3, r5, r3
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042d2:	4629      	mov	r1, r5
 80042d4:	028b      	lsls	r3, r1, #10
 80042d6:	4621      	mov	r1, r4
 80042d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042dc:	4621      	mov	r1, r4
 80042de:	028a      	lsls	r2, r1, #10
 80042e0:	4610      	mov	r0, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e6:	2200      	movs	r2, #0
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	61fa      	str	r2, [r7, #28]
 80042ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f0:	f7fb ff72 	bl	80001d8 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4613      	mov	r3, r2
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_RCC_GetSysClockFreq+0x200>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	3301      	adds	r3, #1
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800430c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004316:	e002      	b.n	800431e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCC_GetSysClockFreq+0x204>)
 800431a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800431c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004320:	4618      	mov	r0, r3
 8004322:	3750      	adds	r7, #80	; 0x50
 8004324:	46bd      	mov	sp, r7
 8004326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800
 8004330:	00f42400 	.word	0x00f42400
 8004334:	007a1200 	.word	0x007a1200

08004338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <HAL_RCC_GetHCLKFreq+0x14>)
 800433e:	681b      	ldr	r3, [r3, #0]
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20000000 	.word	0x20000000

08004350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004354:	f7ff fff0 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b05      	ldr	r3, [pc, #20]	; (8004370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0a9b      	lsrs	r3, r3, #10
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	4903      	ldr	r1, [pc, #12]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800436c:	4618      	mov	r0, r3
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40023800 	.word	0x40023800
 8004374:	08006f88 	.word	0x08006f88

08004378 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800439c:	2b00      	cmp	r3, #0
 800439e:	d038      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043a0:	4b68      	ldr	r3, [pc, #416]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043a6:	f7fc fe99 	bl	80010dc <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043ae:	f7fc fe95 	bl	80010dc <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0bd      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c0:	4b61      	ldr	r3, [pc, #388]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	071b      	lsls	r3, r3, #28
 80043de:	495a      	ldr	r1, [pc, #360]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043e6:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fc fe76 	bl	80010dc <HAL_GetTick>
 80043f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043f4:	f7fc fe72 	bl	80010dc <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e09a      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004406:	4b50      	ldr	r3, [pc, #320]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8083 	beq.w	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	4b48      	ldr	r3, [pc, #288]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	4a47      	ldr	r2, [pc, #284]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6413      	str	r3, [r2, #64]	; 0x40
 8004430:	4b45      	ldr	r3, [pc, #276]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800443c:	4b43      	ldr	r3, [pc, #268]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a42      	ldr	r2, [pc, #264]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004446:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004448:	f7fc fe48 	bl	80010dc <HAL_GetTick>
 800444c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004450:	f7fc fe44 	bl	80010dc <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e06c      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004462:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800446e:	4b36      	ldr	r3, [pc, #216]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004476:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d02f      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	429a      	cmp	r2, r3
 800448a:	d028      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800448c:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800449c:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044a2:	4a29      	ldr	r2, [pc, #164]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044a8:	4b27      	ldr	r3, [pc, #156]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d114      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044b4:	f7fc fe12 	bl	80010dc <HAL_GetTick>
 80044b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fc fe0e 	bl	80010dc <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e034      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ee      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ea:	d10d      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80044ec:	4b16      	ldr	r3, [pc, #88]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004500:	4911      	ldr	r1, [pc, #68]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
 8004506:	e005      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a0e      	ldr	r2, [pc, #56]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004512:	6093      	str	r3, [r2, #8]
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	4909      	ldr	r1, [pc, #36]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	7d1a      	ldrb	r2, [r3, #20]
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004538:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	42470068 	.word	0x42470068
 8004548:	40023800 	.word	0x40023800
 800454c:	40007000 	.word	0x40007000
 8004550:	42470e40 	.word	0x42470e40
 8004554:	424711e0 	.word	0x424711e0

08004558 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d140      	bne.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d131      	bne.n	80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800458c:	4b1f      	ldr	r3, [pc, #124]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800458e:	617b      	str	r3, [r7, #20]
          break;
 8004590:	e031      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800459e:	d109      	bne.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045aa:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e008      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80045b4:	4b14      	ldr	r3, [pc, #80]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	fb02 f303 	mul.w	r3, r2, r3
 80045d8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e0:	0f1b      	lsrs	r3, r3, #28
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]
          break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
          break;
 80045f4:	bf00      	nop
        }
      }
      break;
 80045f6:	bf00      	nop
    }
  }
  return frequency;
 80045f8:	697b      	ldr	r3, [r7, #20]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	00bb8000 	.word	0x00bb8000
 8004610:	007a1200 	.word	0x007a1200
 8004614:	00f42400 	.word	0x00f42400

08004618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e07b      	b.n	8004722 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463a:	d009      	beq.n	8004650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	61da      	str	r2, [r3, #28]
 8004642:	e005      	b.n	8004650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc fbe2 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	ea42 0103 	orr.w	r1, r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	0c1b      	lsrs	r3, r3, #16
 80046ee:	f003 0104 	and.w	r1, r3, #4
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0210 	and.w	r2, r3, #16
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800472a:	b084      	sub	sp, #16
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	f107 001c 	add.w	r0, r7, #28
 8004738:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	2b01      	cmp	r3, #1
 8004740:	d122      	bne.n	8004788 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800476a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f9bf 	bl	8004b00 <USB_CoreReset>
 8004782:	4603      	mov	r3, r0
 8004784:	73fb      	strb	r3, [r7, #15]
 8004786:	e01a      	b.n	80047be <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f9b3 	bl	8004b00 <USB_CoreReset>
 800479a:	4603      	mov	r3, r0
 800479c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800479e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
 80047b0:	e005      	b.n	80047be <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d10b      	bne.n	80047dc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f043 0206 	orr.w	r2, r3, #6
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047e8:	b004      	add	sp, #16
 80047ea:	4770      	bx	lr

080047ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f043 0201 	orr.w	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 0201 	bic.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d115      	bne.n	800487e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800485e:	2001      	movs	r0, #1
 8004860:	f7fc fc48 	bl	80010f4 <HAL_Delay>
      ms++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3301      	adds	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f939 	bl	8004ae2 <USB_GetMode>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d01e      	beq.n	80048b4 <USB_SetCurrentMode+0x84>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b31      	cmp	r3, #49	; 0x31
 800487a:	d9f0      	bls.n	800485e <USB_SetCurrentMode+0x2e>
 800487c:	e01a      	b.n	80048b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d115      	bne.n	80048b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004890:	2001      	movs	r0, #1
 8004892:	f7fc fc2f 	bl	80010f4 <HAL_Delay>
      ms++;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f920 	bl	8004ae2 <USB_GetMode>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <USB_SetCurrentMode+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b31      	cmp	r3, #49	; 0x31
 80048ac:	d9f0      	bls.n	8004890 <USB_SetCurrentMode+0x60>
 80048ae:	e001      	b.n	80048b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e005      	b.n	80048c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b32      	cmp	r3, #50	; 0x32
 80048b8:	d101      	bne.n	80048be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a13      	ldr	r2, [pc, #76]	; (800492c <USB_FlushTxFifo+0x64>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e01b      	b.n	8004920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	daf2      	bge.n	80048d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	019b      	lsls	r3, r3, #6
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3301      	adds	r3, #1
 8004904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4a08      	ldr	r2, [pc, #32]	; (800492c <USB_FlushTxFifo+0x64>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e006      	b.n	8004920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d0f0      	beq.n	8004900 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	00030d40 	.word	0x00030d40

08004930 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3301      	adds	r3, #1
 8004940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <USB_FlushRxFifo+0x5c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d901      	bls.n	800494e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e018      	b.n	8004980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	daf2      	bge.n	800493c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2210      	movs	r2, #16
 800495e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a08      	ldr	r2, [pc, #32]	; (800498c <USB_FlushRxFifo+0x5c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e006      	b.n	8004980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d0f0      	beq.n	8004960 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	00030d40 	.word	0x00030d40

08004990 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	4611      	mov	r1, r2
 800499c:	461a      	mov	r2, r3
 800499e:	460b      	mov	r3, r1
 80049a0:	71fb      	strb	r3, [r7, #7]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d123      	bne.n	80049fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049b6:	88bb      	ldrh	r3, [r7, #4]
 80049b8:	3303      	adds	r3, #3
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e018      	b.n	80049f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	031a      	lsls	r2, r3, #12
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	461a      	mov	r2, r3
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	3301      	adds	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	3301      	adds	r3, #1
 80049e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	3301      	adds	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3301      	adds	r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3e2      	bcc.n	80049c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3724      	adds	r7, #36	; 0x24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b08b      	sub	sp, #44	; 0x2c
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
 8004a36:	e014      	b.n	8004a62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	3301      	adds	r3, #1
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	3301      	adds	r3, #1
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	3301      	adds	r3, #1
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	623b      	str	r3, [r7, #32]
 8004a62:	6a3a      	ldr	r2, [r7, #32]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3e6      	bcc.n	8004a38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a6a:	8bfb      	ldrh	r3, [r7, #30]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01e      	beq.n	8004aae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a70:	2300      	movs	r3, #0
 8004a72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f107 0310 	add.w	r3, r7, #16
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	701a      	strb	r2, [r3, #0]
      i++;
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004aa2:	8bfb      	ldrh	r3, [r7, #30]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004aa8:	8bfb      	ldrh	r3, [r7, #30]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ea      	bne.n	8004a84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	372c      	adds	r7, #44	; 0x2c
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0301 	and.w	r3, r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <USB_CoreReset+0x64>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e01b      	b.n	8004b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	daf2      	bge.n	8004b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f043 0201 	orr.w	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <USB_CoreReset+0x64>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e006      	b.n	8004b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d0f0      	beq.n	8004b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	00030d40 	.word	0x00030d40

08004b68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b086      	sub	sp, #24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d018      	beq.n	8004bf0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d10a      	bne.n	8004bda <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bd2:	f043 0304 	orr.w	r3, r3, #4
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e014      	b.n	8004c04 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e009      	b.n	8004c04 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bfe:	f023 0304 	bic.w	r3, r3, #4
 8004c02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c04:	2110      	movs	r1, #16
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fe5e 	bl	80048c8 <USB_FlushTxFifo>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fe8a 	bl	8004930 <USB_FlushRxFifo>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	e015      	b.n	8004c58 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	3301      	adds	r3, #1
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d3e5      	bcc.n	8004c2c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c6c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <USB_HostInit+0x16c>)
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <USB_HostInit+0x170>)
 8004c8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c90:	e009      	b.n	8004ca6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <USB_HostInit+0x174>)
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a0f      	ldr	r2, [pc, #60]	; (8004ce0 <USB_HostInit+0x178>)
 8004ca2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f043 0210 	orr.w	r2, r3, #16
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <USB_HostInit+0x17c>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cd0:	b004      	add	sp, #16
 8004cd2:	4770      	bx	lr
 8004cd4:	01000200 	.word	0x01000200
 8004cd8:	00e00300 	.word	0x00e00300
 8004cdc:	00600080 	.word	0x00600080
 8004ce0:	004000e0 	.word	0x004000e0
 8004ce4:	a3200008 	.word	0xa3200008

08004ce8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d30:	461a      	mov	r2, r3
 8004d32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d36:	6053      	str	r3, [r2, #4]
 8004d38:	e009      	b.n	8004d4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d106      	bne.n	8004d4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d46:	461a      	mov	r2, r3
 8004d48:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <USB_DriveVbus+0x44>
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d106      	bne.n	8004da0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d9e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004daa:	d109      	bne.n	8004dc0 <USB_DriveVbus+0x64>
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dbe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	0c5b      	lsrs	r3, r3, #17
 8004dec:	f003 0303 	and.w	r3, r3, #3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	b29b      	uxth	r3, r3
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	70fb      	strb	r3, [r7, #3]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70bb      	strb	r3, [r7, #2]
 8004e36:	4613      	mov	r3, r2
 8004e38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d87e      	bhi.n	8004f5c <USB_HC_Init+0x13c>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <USB_HC_Init+0x44>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004f1f 	.word	0x08004f1f
 8004e6c:	08004e75 	.word	0x08004e75
 8004e70:	08004ee1 	.word	0x08004ee1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e80:	461a      	mov	r2, r3
 8004e82:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	da10      	bge.n	8004eb2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004eb0:	e057      	b.n	8004f62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d051      	beq.n	8004f62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	78fa      	ldrb	r2, [r7, #3]
 8004ece:	0151      	lsls	r1, r2, #5
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	440a      	add	r2, r1
 8004ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004edc:	60d3      	str	r3, [r2, #12]
      break;
 8004ede:	e040      	b.n	8004f62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eec:	461a      	mov	r2, r3
 8004eee:	f240 639d 	movw	r3, #1693	; 0x69d
 8004ef2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ef4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da34      	bge.n	8004f66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	0151      	lsls	r1, r2, #5
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	440a      	add	r2, r1
 8004f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f1c:	e023      	b.n	8004f66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f240 2325 	movw	r3, #549	; 0x225
 8004f30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	da17      	bge.n	8004f6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f58:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f5a:	e006      	b.n	8004f6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	77fb      	strb	r3, [r7, #31]
      break;
 8004f60:	e004      	b.n	8004f6c <USB_HC_Init+0x14c>
      break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <USB_HC_Init+0x14c>
      break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <USB_HC_Init+0x14c>
      break;
 8004f6a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f86:	f043 0302 	orr.w	r3, r3, #2
 8004f8a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	6939      	ldr	r1, [r7, #16]
 8004fa2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004fb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da03      	bge.n	8004fc6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc2:	61bb      	str	r3, [r7, #24]
 8004fc4:	e001      	b.n	8004fca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff feff 	bl	8004dce <USB_GetHostSpeed>
 8004fd0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d106      	bne.n	8004fe8 <USB_HC_Init+0x1c8>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d003      	beq.n	8004fe8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	e001      	b.n	8004fec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fec:	787b      	ldrb	r3, [r7, #1]
 8004fee:	059b      	lsls	r3, r3, #22
 8004ff0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ff4:	78bb      	ldrb	r3, [r7, #2]
 8004ff6:	02db      	lsls	r3, r3, #11
 8004ff8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ffc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ffe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005002:	049b      	lsls	r3, r3, #18
 8005004:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005008:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800500a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800500c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005010:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005016:	78fb      	ldrb	r3, [r7, #3]
 8005018:	0159      	lsls	r1, r3, #5
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	440b      	add	r3, r1
 800501e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005022:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005028:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800502a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800502e:	2b03      	cmp	r3, #3
 8005030:	d003      	beq.n	800503a <USB_HC_Init+0x21a>
 8005032:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10f      	bne.n	800505a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4413      	add	r3, r2
 8005042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	0151      	lsls	r1, r2, #5
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	440a      	add	r2, r1
 8005050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005058:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800505a:	7ffb      	ldrb	r3, [r7, #31]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	; 0x30
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	4613      	mov	r3, r2
 8005070:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800507c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005080:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02d      	beq.n	80050ea <USB_HC_StartXfer+0x86>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	791b      	ldrb	r3, [r3, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d129      	bne.n	80050ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d117      	bne.n	80050cc <USB_HC_StartXfer+0x68>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	79db      	ldrb	r3, [r3, #7]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <USB_HC_StartXfer+0x48>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	79db      	ldrb	r3, [r3, #7]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d10f      	bne.n	80050cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	6a3a      	ldr	r2, [r7, #32]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <USB_HC_StartXfer+0x86>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	795b      	ldrb	r3, [r3, #5]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d107      	bne.n	80050ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	785b      	ldrb	r3, [r3, #1]
 80050de:	4619      	mov	r1, r3
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fa0f 	bl	8005504 <USB_DoPing>
      return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e0f8      	b.n	80052dc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	8912      	ldrh	r2, [r2, #8]
 80050fa:	4413      	add	r3, r2
 80050fc:	3b01      	subs	r3, #1
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	8912      	ldrh	r2, [r2, #8]
 8005102:	fbb3 f3f2 	udiv	r3, r3, r2
 8005106:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005108:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800510a:	8b7b      	ldrh	r3, [r7, #26]
 800510c:	429a      	cmp	r2, r3
 800510e:	d90b      	bls.n	8005128 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005110:	8b7b      	ldrh	r3, [r7, #26]
 8005112:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	8912      	ldrh	r2, [r2, #8]
 800511a:	fb03 f202 	mul.w	r2, r3, r2
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	611a      	str	r2, [r3, #16]
 8005122:	e001      	b.n	8005128 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005124:	2301      	movs	r3, #1
 8005126:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	78db      	ldrb	r3, [r3, #3]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	8912      	ldrh	r2, [r2, #8]
 8005136:	fb03 f202 	mul.w	r2, r3, r2
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	611a      	str	r2, [r3, #16]
 800513e:	e003      	b.n	8005148 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	695a      	ldr	r2, [r3, #20]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005152:	04d9      	lsls	r1, r3, #19
 8005154:	4b63      	ldr	r3, [pc, #396]	; (80052e4 <USB_HC_StartXfer+0x280>)
 8005156:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005158:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	7a9b      	ldrb	r3, [r3, #10]
 800515e:	075b      	lsls	r3, r3, #29
 8005160:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005164:	69f9      	ldr	r1, [r7, #28]
 8005166:	0148      	lsls	r0, r1, #5
 8005168:	6a39      	ldr	r1, [r7, #32]
 800516a:	4401      	add	r1, r0
 800516c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005170:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005172:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68d9      	ldr	r1, [r3, #12]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	460a      	mov	r2, r1
 800518c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	0151      	lsls	r1, r2, #5
 80051b8:	6a3a      	ldr	r2, [r7, #32]
 80051ba:	440a      	add	r2, r1
 80051bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	7e7b      	ldrb	r3, [r7, #25]
 80051d6:	075b      	lsls	r3, r3, #29
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	0148      	lsls	r0, r1, #5
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	4401      	add	r1, r0
 80051e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	78db      	ldrb	r3, [r3, #3]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	e003      	b.n	800521a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005218:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005220:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	4413      	add	r3, r2
 800522a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522e:	461a      	mov	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	e04e      	b.n	80052dc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	78db      	ldrb	r3, [r3, #3]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d149      	bne.n	80052da <USB_HC_StartXfer+0x276>
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d045      	beq.n	80052da <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	79db      	ldrb	r3, [r3, #7]
 8005252:	2b03      	cmp	r3, #3
 8005254:	d830      	bhi.n	80052b8 <USB_HC_StartXfer+0x254>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <USB_HC_StartXfer+0x1f8>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	0800526d 	.word	0x0800526d
 8005260:	08005291 	.word	0x08005291
 8005264:	0800526d 	.word	0x0800526d
 8005268:	08005291 	.word	0x08005291
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	3303      	adds	r3, #3
 8005272:	089b      	lsrs	r3, r3, #2
 8005274:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005276:	8afa      	ldrh	r2, [r7, #22]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	b29b      	uxth	r3, r3
 800527e:	429a      	cmp	r2, r3
 8005280:	d91c      	bls.n	80052bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f043 0220 	orr.w	r2, r3, #32
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	619a      	str	r2, [r3, #24]
        }
        break;
 800528e:	e015      	b.n	80052bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	3303      	adds	r3, #3
 8005296:	089b      	lsrs	r3, r3, #2
 8005298:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800529a:	8afa      	ldrh	r2, [r7, #22]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d90a      	bls.n	80052c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80052b6:	e003      	b.n	80052c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80052b8:	bf00      	nop
 80052ba:	e002      	b.n	80052c2 <USB_HC_StartXfer+0x25e>
        break;
 80052bc:	bf00      	nop
 80052be:	e000      	b.n	80052c2 <USB_HC_StartXfer+0x25e>
        break;
 80052c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	68d9      	ldr	r1, [r3, #12]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	785a      	ldrb	r2, [r3, #1]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2000      	movs	r0, #0
 80052d2:	9000      	str	r0, [sp, #0]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fb5b 	bl	8004990 <USB_WritePacket>
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	1ff80000 	.word	0x1ff80000

080052e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	b29b      	uxth	r3, r3
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800530a:	b480      	push	{r7}
 800530c:	b089      	sub	sp, #36	; 0x24
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0c9b      	lsrs	r3, r3, #18
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	0fdb      	lsrs	r3, r3, #31
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d104      	bne.n	8005364 <USB_HC_Halt+0x5a>
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	e0c8      	b.n	80054f6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <USB_HC_Halt+0x66>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d163      	bne.n	8005438 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	440a      	add	r2, r1
 8005386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800538e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 80ab 	bne.w	80054f4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d133      	bne.n	8005412 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f6:	d81d      	bhi.n	8005434 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800540a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540e:	d0ec      	beq.n	80053ea <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005410:	e070      	b.n	80054f4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005430:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005432:	e05f      	b.n	80054f4 <USB_HC_Halt+0x1ea>
            break;
 8005434:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005436:	e05d      	b.n	80054f4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	440a      	add	r2, r1
 800544e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005456:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d133      	bne.n	80054d0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	440a      	add	r2, r1
 800547e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005486:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	440a      	add	r2, r1
 800549e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b4:	d81d      	bhi.n	80054f2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054cc:	d0ec      	beq.n	80054a8 <USB_HC_Halt+0x19e>
 80054ce:	e011      	b.n	80054f4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e000      	b.n	80054f4 <USB_HC_Halt+0x1ea>
          break;
 80054f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3724      	adds	r7, #36	; 0x24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005518:	2301      	movs	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	04da      	lsls	r2, r3, #19
 8005520:	4b15      	ldr	r3, [pc, #84]	; (8005578 <USB_DoPing+0x74>)
 8005522:	4013      	ands	r3, r2
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	440a      	add	r2, r1
 800552c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005534:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800554c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005554:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	4413      	add	r3, r2
 800555e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	1ff80000 	.word	0x1ff80000

0800557c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff f93c 	bl	800480e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005596:	2110      	movs	r1, #16
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff f995 	bl	80048c8 <USB_FlushTxFifo>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff f9c1 	bl	8004930 <USB_FlushRxFifo>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	e01f      	b.n	80055fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f2:	461a      	mov	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b0f      	cmp	r3, #15
 8005602:	d9dc      	bls.n	80055be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005604:	2300      	movs	r3, #0
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e034      	b.n	8005674 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005620:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005628:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005630:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563e:	461a      	mov	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3301      	adds	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005650:	d80c      	bhi.n	800566c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	4413      	add	r3, r2
 800565a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005668:	d0ec      	beq.n	8005644 <USB_StopHost+0xc8>
 800566a:	e000      	b.n	800566e <USB_StopHost+0xf2>
        break;
 800566c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	3301      	adds	r3, #1
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	2b0f      	cmp	r3, #15
 8005678:	d9c7      	bls.n	800560a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005680:	461a      	mov	r2, r3
 8005682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005686:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800568e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff f8ab 	bl	80047ec <USB_EnableGlobalInt>

  return ret;
 8005696:	7ffb      	ldrb	r3, [r7, #31]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b089      	sub	sp, #36	; 0x24
 80056a4:	af04      	add	r7, sp, #16
 80056a6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80056a8:	2301      	movs	r3, #1
 80056aa:	2202      	movs	r2, #2
 80056ac:	2102      	movs	r1, #2
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 fc66 	bl	8005f80 <USBH_FindInterface>
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2bff      	cmp	r3, #255	; 0xff
 80056bc:	d002      	beq.n	80056c4 <USBH_CDC_InterfaceInit+0x24>
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d901      	bls.n	80056c8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056c4:	2302      	movs	r3, #2
 80056c6:	e13d      	b.n	8005944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fc3b 	bl	8005f48 <USBH_SelectInterface>
 80056d2:	4603      	mov	r3, r0
 80056d4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80056d6:	7bbb      	ldrb	r3, [r7, #14]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80056dc:	2302      	movs	r3, #2
 80056de:	e131      	b.n	8005944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80056e6:	2050      	movs	r0, #80	; 0x50
 80056e8:	f001 fb12 	bl	8006d10 <malloc>
 80056ec:	4603      	mov	r3, r0
 80056ee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005700:	2302      	movs	r3, #2
 8005702:	e11f      	b.n	8005944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005704:	2250      	movs	r2, #80	; 0x50
 8005706:	2100      	movs	r1, #0
 8005708:	68b8      	ldr	r0, [r7, #8]
 800570a:	f001 fb11 	bl	8006d30 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	211a      	movs	r1, #26
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	4413      	add	r3, r2
 800571a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b25b      	sxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	da15      	bge.n	8005752 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	211a      	movs	r1, #26
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	211a      	movs	r1, #26
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 ff9c 	bl	8006696 <USBH_AllocPipe>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	7819      	ldrb	r1, [r3, #0]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	7858      	ldrb	r0, [r3, #1]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	8952      	ldrh	r2, [r2, #10]
 800577e:	9202      	str	r2, [sp, #8]
 8005780:	2203      	movs	r2, #3
 8005782:	9201      	str	r2, [sp, #4]
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	4623      	mov	r3, r4
 8005788:	4602      	mov	r2, r0
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 ff54 	bl	8006638 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2200      	movs	r2, #0
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 fa17 	bl	8006bcc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800579e:	2300      	movs	r3, #0
 80057a0:	2200      	movs	r2, #0
 80057a2:	210a      	movs	r1, #10
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fbeb 	bl	8005f80 <USBH_FindInterface>
 80057aa:	4603      	mov	r3, r0
 80057ac:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2bff      	cmp	r3, #255	; 0xff
 80057b2:	d002      	beq.n	80057ba <USBH_CDC_InterfaceInit+0x11a>
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d901      	bls.n	80057be <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0c2      	b.n	8005944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80057be:	7bfb      	ldrb	r3, [r7, #15]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	211a      	movs	r1, #26
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da16      	bge.n	8005804 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	211a      	movs	r1, #26
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	211a      	movs	r1, #26
 80057f2:	fb01 f303 	mul.w	r3, r1, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057fc:	881a      	ldrh	r2, [r3, #0]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	835a      	strh	r2, [r3, #26]
 8005802:	e015      	b.n	8005830 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	211a      	movs	r1, #26
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	4413      	add	r3, r2
 8005810:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005814:	781a      	ldrb	r2, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	211a      	movs	r1, #26
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	4413      	add	r3, r2
 8005826:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800582a:	881a      	ldrh	r2, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	211a      	movs	r1, #26
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	4413      	add	r3, r2
 800583c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	b25b      	sxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	da16      	bge.n	8005876 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	211a      	movs	r1, #26
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	4413      	add	r3, r2
 8005854:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	211a      	movs	r1, #26
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800586e:	881a      	ldrh	r2, [r3, #0]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	835a      	strh	r2, [r3, #26]
 8005874:	e015      	b.n	80058a2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	211a      	movs	r1, #26
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005886:	781a      	ldrb	r2, [r3, #0]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	211a      	movs	r1, #26
 8005892:	fb01 f303 	mul.w	r3, r1, r3
 8005896:	4413      	add	r3, r2
 8005898:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800589c:	881a      	ldrh	r2, [r3, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	7b9b      	ldrb	r3, [r3, #14]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fef4 	bl	8006696 <USBH_AllocPipe>
 80058ae:	4603      	mov	r3, r0
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	7bdb      	ldrb	r3, [r3, #15]
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 feea 	bl	8006696 <USBH_AllocPipe>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	7b59      	ldrb	r1, [r3, #13]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	7b98      	ldrb	r0, [r3, #14]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	8b12      	ldrh	r2, [r2, #24]
 80058e2:	9202      	str	r2, [sp, #8]
 80058e4:	2202      	movs	r2, #2
 80058e6:	9201      	str	r2, [sp, #4]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	4623      	mov	r3, r4
 80058ec:	4602      	mov	r2, r0
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fea2 	bl	8006638 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	7b19      	ldrb	r1, [r3, #12]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	7bd8      	ldrb	r0, [r3, #15]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	8b52      	ldrh	r2, [r2, #26]
 800590c:	9202      	str	r2, [sp, #8]
 800590e:	2202      	movs	r2, #2
 8005910:	9201      	str	r2, [sp, #4]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	4623      	mov	r3, r4
 8005916:	4602      	mov	r2, r0
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fe8d 	bl	8006638 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	7b5b      	ldrb	r3, [r3, #13]
 800592a:	2200      	movs	r2, #0
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 f94c 	bl	8006bcc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	7b1b      	ldrb	r3, [r3, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 f945 	bl	8006bcc <USBH_LL_SetToggle>

  return USBH_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	bd90      	pop	{r4, r7, pc}

0800594c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00e      	beq.n	8005984 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fe82 	bl	8006676 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fead 	bl	80066d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	7b1b      	ldrb	r3, [r3, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00e      	beq.n	80059aa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	7b1b      	ldrb	r3, [r3, #12]
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fe6f 	bl	8006676 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	7b1b      	ldrb	r3, [r3, #12]
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fe9a 	bl	80066d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	7b5b      	ldrb	r3, [r3, #13]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00e      	beq.n	80059d0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	7b5b      	ldrb	r3, [r3, #13]
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fe5c 	bl	8006676 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	7b5b      	ldrb	r3, [r3, #13]
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fe87 	bl	80066d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 f99b 	bl	8006d20 <free>
    phost->pActiveClass->pData = 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059f0:	2200      	movs	r2, #0
 80059f2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3340      	adds	r3, #64	; 0x40
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f8b1 	bl	8005b7e <GetLineCoding>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005a20:	7afb      	ldrb	r3, [r7, #11]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005a32:	7afb      	ldrb	r3, [r7, #11]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d877      	bhi.n	8005b50 <USBH_CDC_Process+0x114>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <USBH_CDC_Process+0x2c>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a7d 	.word	0x08005a7d
 8005a6c:	08005a83 	.word	0x08005a83
 8005a70:	08005ab3 	.word	0x08005ab3
 8005a74:	08005b27 	.word	0x08005b27
 8005a78:	08005b35 	.word	0x08005b35
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a80:	e06d      	b.n	8005b5e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f897 	bl	8005bbc <SetLineCoding>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a92:	7bbb      	ldrb	r3, [r7, #14]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005aa0:	e058      	b.n	8005b54 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d055      	beq.n	8005b54 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2204      	movs	r2, #4
 8005aac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005ab0:	e050      	b.n	8005b54 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	3340      	adds	r3, #64	; 0x40
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f860 	bl	8005b7e <GetLineCoding>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d126      	bne.n	8005b16 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d13b      	bne.n	8005b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d133      	bne.n	8005b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d12b      	bne.n	8005b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b08:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d124      	bne.n	8005b58 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f958 	bl	8005dc4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b14:	e020      	b.n	8005b58 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d01d      	beq.n	8005b58 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b24:	e018      	b.n	8005b58 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f867 	bl	8005bfa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f8da 	bl	8005ce6 <CDC_ProcessReception>
      break;
 8005b32:	e014      	b.n	8005b5e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005b34:	2100      	movs	r1, #0
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fb08 	bl	800614c <USBH_ClrFeature>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005b4e:	e005      	b.n	8005b5c <USBH_CDC_Process+0x120>

    default:
      break;
 8005b50:	bf00      	nop
 8005b52:	e004      	b.n	8005b5e <USBH_CDC_Process+0x122>
      break;
 8005b54:	bf00      	nop
 8005b56:	e002      	b.n	8005b5e <USBH_CDC_Process+0x122>
      break;
 8005b58:	bf00      	nop
 8005b5a:	e000      	b.n	8005b5e <USBH_CDC_Process+0x122>
      break;
 8005b5c:	bf00      	nop

  }

  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b082      	sub	sp, #8
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	22a1      	movs	r2, #161	; 0xa1
 8005b8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2221      	movs	r2, #33	; 0x21
 8005b92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2207      	movs	r2, #7
 8005ba4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2207      	movs	r2, #7
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 faf1 	bl	8006194 <USBH_CtlReq>
 8005bb2:	4603      	mov	r3, r0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2221      	movs	r2, #33	; 0x21
 8005bca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2207      	movs	r2, #7
 8005be2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2207      	movs	r2, #7
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fad2 	bl	8006194 <USBH_CtlReq>
 8005bf0:	4603      	mov	r3, r0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af02      	add	r7, sp, #8
 8005c00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d002      	beq.n	8005c20 <CDC_ProcessTransmission+0x26>
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d023      	beq.n	8005c66 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005c1e:	e05e      	b.n	8005cde <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	8b12      	ldrh	r2, [r2, #24]
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d90b      	bls.n	8005c44 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	69d9      	ldr	r1, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8b1a      	ldrh	r2, [r3, #24]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	7b5b      	ldrb	r3, [r3, #13]
 8005c38:	2001      	movs	r0, #1
 8005c3a:	9000      	str	r0, [sp, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fcb8 	bl	80065b2 <USBH_BulkSendData>
 8005c42:	e00b      	b.n	8005c5c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	7b5b      	ldrb	r3, [r3, #13]
 8005c52:	2001      	movs	r0, #1
 8005c54:	9000      	str	r0, [sp, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fcab 	bl	80065b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c64:	e03b      	b.n	8005cde <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	7b5b      	ldrb	r3, [r3, #13]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 ff83 	bl	8006b78 <USBH_LL_GetURBState>
 8005c72:	4603      	mov	r3, r0
 8005c74:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005c76:	7afb      	ldrb	r3, [r7, #11]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d128      	bne.n	8005cce <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	8b12      	ldrh	r2, [r2, #24]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d90e      	bls.n	8005ca6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	8b12      	ldrh	r2, [r2, #24]
 8005c90:	1a9a      	subs	r2, r3, r2
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	8b12      	ldrh	r2, [r2, #24]
 8005c9e:	441a      	add	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	61da      	str	r2, [r3, #28]
 8005ca4:	e002      	b.n	8005cac <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cbc:	e00e      	b.n	8005cdc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f868 	bl	8005d9c <USBH_CDC_TransmitCallback>
      break;
 8005ccc:	e006      	b.n	8005cdc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005cce:	7afb      	ldrb	r3, [r7, #11]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d103      	bne.n	8005cdc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cdc:	bf00      	nop
  }
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d002      	beq.n	8005d0c <CDC_ProcessReception+0x26>
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d00e      	beq.n	8005d28 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005d0a:	e043      	b.n	8005d94 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	6a19      	ldr	r1, [r3, #32]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	8b5a      	ldrh	r2, [r3, #26]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	7b1b      	ldrb	r3, [r3, #12]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fc6f 	bl	80065fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2204      	movs	r2, #4
 8005d22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d26:	e035      	b.n	8005d94 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	7b1b      	ldrb	r3, [r3, #12]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 ff22 	bl	8006b78 <USBH_LL_GetURBState>
 8005d34:	4603      	mov	r3, r0
 8005d36:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d38:	7cfb      	ldrb	r3, [r7, #19]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d129      	bne.n	8005d92 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	7b1b      	ldrb	r3, [r3, #12]
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fe85 	bl	8006a54 <USBH_LL_GetLastXferSize>
 8005d4a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d016      	beq.n	8005d84 <CDC_ProcessReception+0x9e>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	8b5b      	ldrh	r3, [r3, #26]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d910      	bls.n	8005d84 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad2      	subs	r2, r2, r3
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	6a1a      	ldr	r2, [r3, #32]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	441a      	add	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d82:	e006      	b.n	8005d92 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f80f 	bl	8005db0 <USBH_CDC_ReceiveCallback>
      break;
 8005d92:	bf00      	nop
  }
}
 8005d94:	bf00      	nop
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005dec:	2302      	movs	r3, #2
 8005dee:	e029      	b.n	8005e44 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	79fa      	ldrb	r2, [r7, #7]
 8005df4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f81f 	bl	8005e4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fd97 	bl	8006970 <USBH_LL_Init>

  return USBH_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e009      	b.n	8005e72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	33e0      	adds	r3, #224	; 0xe0
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	2200      	movs	r2, #0
 8005e6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b0f      	cmp	r3, #15
 8005e76:	d9f2      	bls.n	8005e5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
 8005e7c:	e009      	b.n	8005e92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e98:	d3f1      	bcc.n	8005e7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2240      	movs	r2, #64	; 0x40
 8005ebe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d016      	beq.n	8005f36 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10e      	bne.n	8005f30 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f18:	1c59      	adds	r1, r3, #1
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	33de      	adds	r3, #222	; 0xde
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	e004      	b.n	8005f3a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f30:	2302      	movs	r3, #2
 8005f32:	73fb      	strb	r3, [r7, #15]
 8005f34:	e001      	b.n	8005f3a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f36:	2302      	movs	r3, #2
 8005f38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f5e:	78fa      	ldrb	r2, [r7, #3]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d204      	bcs.n	8005f6e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005f6c:	e001      	b.n	8005f72 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	70fb      	strb	r3, [r7, #3]
 8005f92:	460b      	mov	r3, r1
 8005f94:	70bb      	strb	r3, [r7, #2]
 8005f96:	4613      	mov	r3, r2
 8005f98:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005fa8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005faa:	e025      	b.n	8005ff8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	221a      	movs	r2, #26
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	3302      	adds	r3, #2
 8005fbc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	795b      	ldrb	r3, [r3, #5]
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d002      	beq.n	8005fce <USBH_FindInterface+0x4e>
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	2bff      	cmp	r3, #255	; 0xff
 8005fcc:	d111      	bne.n	8005ff2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fd2:	78ba      	ldrb	r2, [r7, #2]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d002      	beq.n	8005fde <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fd8:	78bb      	ldrb	r3, [r7, #2]
 8005fda:	2bff      	cmp	r3, #255	; 0xff
 8005fdc:	d109      	bne.n	8005ff2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fe2:	787a      	ldrb	r2, [r7, #1]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d002      	beq.n	8005fee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fe8:	787b      	ldrb	r3, [r7, #1]
 8005fea:	2bff      	cmp	r3, #255	; 0xff
 8005fec:	d101      	bne.n	8005ff2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	e006      	b.n	8006000 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d9d6      	bls.n	8005fac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ffe:	23ff      	movs	r3, #255	; 0xff
}
 8006000:	4618      	mov	r0, r3
 8006002:	371c      	adds	r7, #28
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fce7 	bl	80069e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800601a:	2101      	movs	r1, #1
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fdbe 	bl	8006b9e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f804 	bl	800606e <USBH_HandleSof>
}
 8006066:	bf00      	nop
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b0b      	cmp	r3, #11
 800607e:	d10a      	bne.n	8006096 <USBH_HandleSof+0x28>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
  }
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80060ae:	bf00      	nop
}
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80060ca:	bf00      	nop
}
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fc7a 	bl	8006a1e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	791b      	ldrb	r3, [r3, #4]
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fad1 	bl	80066d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	795b      	ldrb	r3, [r3, #5]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 facb 	bl	80066d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	789b      	ldrb	r3, [r3, #2]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d10f      	bne.n	8006180 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006180:	2200      	movs	r2, #0
 8006182:	2100      	movs	r1, #0
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f805 	bl	8006194 <USBH_CtlReq>
 800618a:	4603      	mov	r3, r0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	789b      	ldrb	r3, [r3, #2]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d002      	beq.n	80061b4 <USBH_CtlReq+0x20>
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d00f      	beq.n	80061d2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80061b2:	e027      	b.n	8006204 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	88fa      	ldrh	r2, [r7, #6]
 80061be:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2202      	movs	r2, #2
 80061ca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80061cc:	2301      	movs	r3, #1
 80061ce:	75fb      	strb	r3, [r7, #23]
      break;
 80061d0:	e018      	b.n	8006204 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f81c 	bl	8006210 <USBH_HandleControl>
 80061d8:	4603      	mov	r3, r0
 80061da:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <USBH_CtlReq+0x54>
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d106      	bne.n	80061f6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	761a      	strb	r2, [r3, #24]
      break;
 80061f4:	e005      	b.n	8006202 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d102      	bne.n	8006202 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	709a      	strb	r2, [r3, #2]
      break;
 8006202:	bf00      	nop
  }
  return status;
 8006204:	7dfb      	ldrb	r3, [r7, #23]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af02      	add	r7, sp, #8
 8006216:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800621c:	2300      	movs	r3, #0
 800621e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	7e1b      	ldrb	r3, [r3, #24]
 8006224:	3b01      	subs	r3, #1
 8006226:	2b0a      	cmp	r3, #10
 8006228:	f200 8156 	bhi.w	80064d8 <USBH_HandleControl+0x2c8>
 800622c:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <USBH_HandleControl+0x24>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006261 	.word	0x08006261
 8006238:	0800627b 	.word	0x0800627b
 800623c:	080062e5 	.word	0x080062e5
 8006240:	0800630b 	.word	0x0800630b
 8006244:	08006343 	.word	0x08006343
 8006248:	0800636d 	.word	0x0800636d
 800624c:	080063bf 	.word	0x080063bf
 8006250:	080063e1 	.word	0x080063e1
 8006254:	0800641d 	.word	0x0800641d
 8006258:	08006443 	.word	0x08006443
 800625c:	08006481 	.word	0x08006481
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f103 0110 	add.w	r1, r3, #16
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	795b      	ldrb	r3, [r3, #5]
 800626a:	461a      	mov	r2, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f943 	bl	80064f8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	761a      	strb	r2, [r3, #24]
      break;
 8006278:	e139      	b.n	80064ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	795b      	ldrb	r3, [r3, #5]
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fc79 	bl	8006b78 <USBH_LL_GetURBState>
 8006286:	4603      	mov	r3, r0
 8006288:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d11e      	bne.n	80062ce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	7c1b      	ldrb	r3, [r3, #16]
 8006294:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006298:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8adb      	ldrh	r3, [r3, #22]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80062a2:	7b7b      	ldrb	r3, [r7, #13]
 80062a4:	2b80      	cmp	r3, #128	; 0x80
 80062a6:	d103      	bne.n	80062b0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2203      	movs	r2, #3
 80062ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80062ae:	e115      	b.n	80064dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2205      	movs	r2, #5
 80062b4:	761a      	strb	r2, [r3, #24]
      break;
 80062b6:	e111      	b.n	80064dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80062b8:	7b7b      	ldrb	r3, [r7, #13]
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d103      	bne.n	80062c6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2209      	movs	r2, #9
 80062c2:	761a      	strb	r2, [r3, #24]
      break;
 80062c4:	e10a      	b.n	80064dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2207      	movs	r2, #7
 80062ca:	761a      	strb	r2, [r3, #24]
      break;
 80062cc:	e106      	b.n	80064dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80062ce:	7bbb      	ldrb	r3, [r7, #14]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d003      	beq.n	80062dc <USBH_HandleControl+0xcc>
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	f040 8100 	bne.w	80064dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	220b      	movs	r2, #11
 80062e0:	761a      	strb	r2, [r3, #24]
      break;
 80062e2:	e0fb      	b.n	80064dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6899      	ldr	r1, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	899a      	ldrh	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	791b      	ldrb	r3, [r3, #4]
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f93a 	bl	8006576 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2204      	movs	r2, #4
 8006306:	761a      	strb	r2, [r3, #24]
      break;
 8006308:	e0f1      	b.n	80064ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	791b      	ldrb	r3, [r3, #4]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fc31 	bl	8006b78 <USBH_LL_GetURBState>
 8006316:	4603      	mov	r3, r0
 8006318:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d102      	bne.n	8006326 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2209      	movs	r2, #9
 8006324:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006326:	7bbb      	ldrb	r3, [r7, #14]
 8006328:	2b05      	cmp	r3, #5
 800632a:	d102      	bne.n	8006332 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800632c:	2303      	movs	r3, #3
 800632e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006330:	e0d6      	b.n	80064e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	2b04      	cmp	r3, #4
 8006336:	f040 80d3 	bne.w	80064e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	220b      	movs	r2, #11
 800633e:	761a      	strb	r2, [r3, #24]
      break;
 8006340:	e0ce      	b.n	80064e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6899      	ldr	r1, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	899a      	ldrh	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	795b      	ldrb	r3, [r3, #5]
 800634e:	2001      	movs	r0, #1
 8006350:	9000      	str	r0, [sp, #0]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f8ea 	bl	800652c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800635e:	b29a      	uxth	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2206      	movs	r2, #6
 8006368:	761a      	strb	r2, [r3, #24]
      break;
 800636a:	e0c0      	b.n	80064ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	795b      	ldrb	r3, [r3, #5]
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fc00 	bl	8006b78 <USBH_LL_GetURBState>
 8006378:	4603      	mov	r3, r0
 800637a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d103      	bne.n	800638a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2207      	movs	r2, #7
 8006386:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006388:	e0ac      	b.n	80064e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	2b05      	cmp	r3, #5
 800638e:	d105      	bne.n	800639c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	220c      	movs	r2, #12
 8006394:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006396:	2303      	movs	r3, #3
 8006398:	73fb      	strb	r3, [r7, #15]
      break;
 800639a:	e0a3      	b.n	80064e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d103      	bne.n	80063aa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2205      	movs	r2, #5
 80063a6:	761a      	strb	r2, [r3, #24]
      break;
 80063a8:	e09c      	b.n	80064e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	f040 8099 	bne.w	80064e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	220b      	movs	r2, #11
 80063b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80063b8:	2302      	movs	r3, #2
 80063ba:	73fb      	strb	r3, [r7, #15]
      break;
 80063bc:	e092      	b.n	80064e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	791b      	ldrb	r3, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f8d5 	bl	8006576 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2208      	movs	r2, #8
 80063dc:	761a      	strb	r2, [r3, #24]

      break;
 80063de:	e086      	b.n	80064ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	791b      	ldrb	r3, [r3, #4]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fbc6 	bl	8006b78 <USBH_LL_GetURBState>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d105      	bne.n	8006402 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	220d      	movs	r2, #13
 80063fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006400:	e072      	b.n	80064e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006402:	7bbb      	ldrb	r3, [r7, #14]
 8006404:	2b04      	cmp	r3, #4
 8006406:	d103      	bne.n	8006410 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	220b      	movs	r2, #11
 800640c:	761a      	strb	r2, [r3, #24]
      break;
 800640e:	e06b      	b.n	80064e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	2b05      	cmp	r3, #5
 8006414:	d168      	bne.n	80064e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006416:	2303      	movs	r3, #3
 8006418:	73fb      	strb	r3, [r7, #15]
      break;
 800641a:	e065      	b.n	80064e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	795b      	ldrb	r3, [r3, #5]
 8006420:	2201      	movs	r2, #1
 8006422:	9200      	str	r2, [sp, #0]
 8006424:	2200      	movs	r2, #0
 8006426:	2100      	movs	r1, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f87f 	bl	800652c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006434:	b29a      	uxth	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	220a      	movs	r2, #10
 800643e:	761a      	strb	r2, [r3, #24]
      break;
 8006440:	e055      	b.n	80064ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	795b      	ldrb	r3, [r3, #5]
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fb95 	bl	8006b78 <USBH_LL_GetURBState>
 800644e:	4603      	mov	r3, r0
 8006450:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d105      	bne.n	8006464 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	220d      	movs	r2, #13
 8006460:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006462:	e043      	b.n	80064ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d103      	bne.n	8006472 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2209      	movs	r2, #9
 800646e:	761a      	strb	r2, [r3, #24]
      break;
 8006470:	e03c      	b.n	80064ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	2b04      	cmp	r3, #4
 8006476:	d139      	bne.n	80064ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	220b      	movs	r2, #11
 800647c:	761a      	strb	r2, [r3, #24]
      break;
 800647e:	e035      	b.n	80064ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7e5b      	ldrb	r3, [r3, #25]
 8006484:	3301      	adds	r3, #1
 8006486:	b2da      	uxtb	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	765a      	strb	r2, [r3, #25]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	7e5b      	ldrb	r3, [r3, #25]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d806      	bhi.n	80064a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80064a0:	e025      	b.n	80064ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064a8:	2106      	movs	r1, #6
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	795b      	ldrb	r3, [r3, #5]
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f90c 	bl	80066d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	791b      	ldrb	r3, [r3, #4]
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f906 	bl	80066d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80064d2:	2302      	movs	r3, #2
 80064d4:	73fb      	strb	r3, [r7, #15]
      break;
 80064d6:	e00a      	b.n	80064ee <USBH_HandleControl+0x2de>

    default:
      break;
 80064d8:	bf00      	nop
 80064da:	e008      	b.n	80064ee <USBH_HandleControl+0x2de>
      break;
 80064dc:	bf00      	nop
 80064de:	e006      	b.n	80064ee <USBH_HandleControl+0x2de>
      break;
 80064e0:	bf00      	nop
 80064e2:	e004      	b.n	80064ee <USBH_HandleControl+0x2de>
      break;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <USBH_HandleControl+0x2de>
      break;
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <USBH_HandleControl+0x2de>
      break;
 80064ec:	bf00      	nop
  }

  return status;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006506:	79f9      	ldrb	r1, [r7, #7]
 8006508:	2300      	movs	r3, #0
 800650a:	9303      	str	r3, [sp, #12]
 800650c:	2308      	movs	r3, #8
 800650e:	9302      	str	r3, [sp, #8]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	2300      	movs	r3, #0
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	2300      	movs	r3, #0
 800651a:	2200      	movs	r2, #0
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fafa 	bl	8006b16 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af04      	add	r7, sp, #16
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	4611      	mov	r1, r2
 8006538:	461a      	mov	r2, r3
 800653a:	460b      	mov	r3, r1
 800653c:	80fb      	strh	r3, [r7, #6]
 800653e:	4613      	mov	r3, r2
 8006540:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006550:	7979      	ldrb	r1, [r7, #5]
 8006552:	7e3b      	ldrb	r3, [r7, #24]
 8006554:	9303      	str	r3, [sp, #12]
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	9302      	str	r3, [sp, #8]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	2301      	movs	r3, #1
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	2300      	movs	r3, #0
 8006564:	2200      	movs	r2, #0
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fad5 	bl	8006b16 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b088      	sub	sp, #32
 800657a:	af04      	add	r7, sp, #16
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	4611      	mov	r1, r2
 8006582:	461a      	mov	r2, r3
 8006584:	460b      	mov	r3, r1
 8006586:	80fb      	strh	r3, [r7, #6]
 8006588:	4613      	mov	r3, r2
 800658a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800658c:	7979      	ldrb	r1, [r7, #5]
 800658e:	2300      	movs	r3, #0
 8006590:	9303      	str	r3, [sp, #12]
 8006592:	88fb      	ldrh	r3, [r7, #6]
 8006594:	9302      	str	r3, [sp, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	2301      	movs	r3, #1
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	2300      	movs	r3, #0
 80065a0:	2201      	movs	r2, #1
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 fab7 	bl	8006b16 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80065a8:	2300      	movs	r3, #0

}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b088      	sub	sp, #32
 80065b6:	af04      	add	r7, sp, #16
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	4611      	mov	r1, r2
 80065be:	461a      	mov	r2, r3
 80065c0:	460b      	mov	r3, r1
 80065c2:	80fb      	strh	r3, [r7, #6]
 80065c4:	4613      	mov	r3, r2
 80065c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80065d6:	7979      	ldrb	r1, [r7, #5]
 80065d8:	7e3b      	ldrb	r3, [r7, #24]
 80065da:	9303      	str	r3, [sp, #12]
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	9302      	str	r3, [sp, #8]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	2301      	movs	r3, #1
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	2302      	movs	r3, #2
 80065ea:	2200      	movs	r2, #0
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fa92 	bl	8006b16 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af04      	add	r7, sp, #16
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4611      	mov	r1, r2
 8006608:	461a      	mov	r2, r3
 800660a:	460b      	mov	r3, r1
 800660c:	80fb      	strh	r3, [r7, #6]
 800660e:	4613      	mov	r3, r2
 8006610:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006612:	7979      	ldrb	r1, [r7, #5]
 8006614:	2300      	movs	r3, #0
 8006616:	9303      	str	r3, [sp, #12]
 8006618:	88fb      	ldrh	r3, [r7, #6]
 800661a:	9302      	str	r3, [sp, #8]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	2301      	movs	r3, #1
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	2302      	movs	r3, #2
 8006626:	2201      	movs	r2, #1
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 fa74 	bl	8006b16 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af04      	add	r7, sp, #16
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	461a      	mov	r2, r3
 8006646:	4603      	mov	r3, r0
 8006648:	70fb      	strb	r3, [r7, #3]
 800664a:	460b      	mov	r3, r1
 800664c:	70bb      	strb	r3, [r7, #2]
 800664e:	4613      	mov	r3, r2
 8006650:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006652:	7878      	ldrb	r0, [r7, #1]
 8006654:	78ba      	ldrb	r2, [r7, #2]
 8006656:	78f9      	ldrb	r1, [r7, #3]
 8006658:	8b3b      	ldrh	r3, [r7, #24]
 800665a:	9302      	str	r3, [sp, #8]
 800665c:	7d3b      	ldrb	r3, [r7, #20]
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	7c3b      	ldrb	r3, [r7, #16]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	4603      	mov	r3, r0
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa07 	bl	8006a7a <USBH_LL_OpenPipe>

  return USBH_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	460b      	mov	r3, r1
 8006680:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fa26 	bl	8006ad8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f836 	bl	8006714 <USBH_GetFreePipe>
 80066a8:	4603      	mov	r3, r0
 80066aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80066ac:	89fb      	ldrh	r3, [r7, #14]
 80066ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00a      	beq.n	80066cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	33e0      	adds	r3, #224	; 0xe0
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80066cc:	89fb      	ldrh	r3, [r7, #14]
 80066ce:	b2db      	uxtb	r3, r3
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	2b0f      	cmp	r3, #15
 80066e8:	d80d      	bhi.n	8006706 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	33e0      	adds	r3, #224	; 0xe0
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	78fb      	ldrb	r3, [r7, #3]
 80066f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	33e0      	adds	r3, #224	; 0xe0
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
 8006724:	e00f      	b.n	8006746 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	33e0      	adds	r3, #224	; 0xe0
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	b29b      	uxth	r3, r3
 800673e:	e007      	b.n	8006750 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	3301      	adds	r3, #1
 8006744:	73fb      	strb	r3, [r7, #15]
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	2b0f      	cmp	r3, #15
 800674a:	d9ec      	bls.n	8006726 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800674c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006760:	2201      	movs	r2, #1
 8006762:	490e      	ldr	r1, [pc, #56]	; (800679c <MX_USB_HOST_Init+0x40>)
 8006764:	480e      	ldr	r0, [pc, #56]	; (80067a0 <MX_USB_HOST_Init+0x44>)
 8006766:	f7ff fb37 	bl	8005dd8 <USBH_Init>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006770:	f7fa fa1c 	bl	8000bac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006774:	490b      	ldr	r1, [pc, #44]	; (80067a4 <MX_USB_HOST_Init+0x48>)
 8006776:	480a      	ldr	r0, [pc, #40]	; (80067a0 <MX_USB_HOST_Init+0x44>)
 8006778:	f7ff fbbc 	bl	8005ef4 <USBH_RegisterClass>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006782:	f7fa fa13 	bl	8000bac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006786:	4806      	ldr	r0, [pc, #24]	; (80067a0 <MX_USB_HOST_Init+0x44>)
 8006788:	f7ff fc40 	bl	800600c <USBH_Start>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006792:	f7fa fa0b 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006796:	bf00      	nop
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	080067a9 	.word	0x080067a9
 80067a0:	200001f0 	.word	0x200001f0
 80067a4:	2000000c 	.word	0x2000000c

080067a8 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d819      	bhi.n	80067f0 <USBH_UserProcess+0x48>
 80067bc:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <USBH_UserProcess+0x1c>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067f1 	.word	0x080067f1
 80067c8:	080067e1 	.word	0x080067e1
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067e9 	.word	0x080067e9
 80067d4:	080067d9 	.word	0x080067d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <USBH_UserProcess+0x58>)
 80067da:	2203      	movs	r2, #3
 80067dc:	701a      	strb	r2, [r3, #0]
  break;
 80067de:	e008      	b.n	80067f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <USBH_UserProcess+0x58>)
 80067e2:	2202      	movs	r2, #2
 80067e4:	701a      	strb	r2, [r3, #0]
  break;
 80067e6:	e004      	b.n	80067f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <USBH_UserProcess+0x58>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
  break;
 80067ee:	e000      	b.n	80067f2 <USBH_UserProcess+0x4a>

  default:
  break;
 80067f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	200005c8 	.word	0x200005c8

08006804 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08a      	sub	sp, #40	; 0x28
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800680c:	f107 0314 	add.w	r3, r7, #20
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	609a      	str	r2, [r3, #8]
 8006818:	60da      	str	r2, [r3, #12]
 800681a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006824:	d147      	bne.n	80068b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <HAL_HCD_MspInit+0xbc>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	4a24      	ldr	r2, [pc, #144]	; (80068c0 <HAL_HCD_MspInit+0xbc>)
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	6313      	str	r3, [r2, #48]	; 0x30
 8006836:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <HAL_HCD_MspInit+0xbc>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006848:	2300      	movs	r3, #0
 800684a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006850:	f107 0314 	add.w	r3, r7, #20
 8006854:	4619      	mov	r1, r3
 8006856:	481b      	ldr	r0, [pc, #108]	; (80068c4 <HAL_HCD_MspInit+0xc0>)
 8006858:	f7fa fd82 	bl	8001360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800685c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006862:	2302      	movs	r3, #2
 8006864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006866:	2300      	movs	r3, #0
 8006868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800686a:	2303      	movs	r3, #3
 800686c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800686e:	230a      	movs	r3, #10
 8006870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006872:	f107 0314 	add.w	r3, r7, #20
 8006876:	4619      	mov	r1, r3
 8006878:	4812      	ldr	r0, [pc, #72]	; (80068c4 <HAL_HCD_MspInit+0xc0>)
 800687a:	f7fa fd71 	bl	8001360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800687e:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <HAL_HCD_MspInit+0xbc>)
 8006880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006882:	4a0f      	ldr	r2, [pc, #60]	; (80068c0 <HAL_HCD_MspInit+0xbc>)
 8006884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006888:	6353      	str	r3, [r2, #52]	; 0x34
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <HAL_HCD_MspInit+0xbc>)
 8006890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006892:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <HAL_HCD_MspInit+0xbc>)
 8006894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006898:	6453      	str	r3, [r2, #68]	; 0x44
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <HAL_HCD_MspInit+0xbc>)
 800689c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80068a6:	2200      	movs	r2, #0
 80068a8:	2100      	movs	r1, #0
 80068aa:	2043      	movs	r0, #67	; 0x43
 80068ac:	f7fa fd21 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80068b0:	2043      	movs	r0, #67	; 0x43
 80068b2:	f7fa fd3a 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80068b6:	bf00      	nop
 80068b8:	3728      	adds	r7, #40	; 0x28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40020000 	.word	0x40020000

080068c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fbb7 	bl	800604a <USBH_LL_IncTimer>
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fbef 	bl	80060d6 <USBH_LL_Connect>
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff fbf8 	bl	8006104 <USBH_LL_Disconnect>
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
 8006928:	4613      	mov	r3, r2
 800692a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fba9 	bl	800609e <USBH_LL_PortEnabled>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fba9 	bl	80060ba <USBH_LL_PortDisabled>
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800697e:	2b01      	cmp	r3, #1
 8006980:	d12a      	bne.n	80069d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006982:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <USBH_LL_Init+0x74>)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <USBH_LL_Init+0x74>)
 800698e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006992:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <USBH_LL_Init+0x74>)
 8006994:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006998:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800699a:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <USBH_LL_Init+0x74>)
 800699c:	2208      	movs	r2, #8
 800699e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80069a0:	4b10      	ldr	r3, [pc, #64]	; (80069e4 <USBH_LL_Init+0x74>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <USBH_LL_Init+0x74>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80069ac:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <USBH_LL_Init+0x74>)
 80069ae:	2202      	movs	r2, #2
 80069b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <USBH_LL_Init+0x74>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80069b8:	480a      	ldr	r0, [pc, #40]	; (80069e4 <USBH_LL_Init+0x74>)
 80069ba:	f7fa fe86 	bl	80016ca <HAL_HCD_Init>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80069c4:	f7fa f8f2 	bl	8000bac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80069c8:	4806      	ldr	r0, [pc, #24]	; (80069e4 <USBH_LL_Init+0x74>)
 80069ca:	f7fb fa5c 	bl	8001e86 <HAL_HCD_GetCurrentFrame>
 80069ce:	4603      	mov	r3, r0
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fb2a 	bl	800602c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	200005cc 	.word	0x200005cc

080069e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fb f9d9 	bl	8001db6 <HAL_HCD_Start>
 8006a04:	4603      	mov	r3, r0
 8006a06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f90e 	bl	8006c2c <USBH_Get_USB_Status>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fb f9e1 	bl	8001dfc <HAL_HCD_Stop>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 f8f3 	bl	8006c2c <USBH_Get_USB_Status>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fb f9f7 	bl	8001e5e <HAL_HCD_HC_GetXferCount>
 8006a70:	4603      	mov	r3, r0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006a7a:	b590      	push	{r4, r7, lr}
 8006a7c:	b089      	sub	sp, #36	; 0x24
 8006a7e:	af04      	add	r7, sp, #16
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	4608      	mov	r0, r1
 8006a84:	4611      	mov	r1, r2
 8006a86:	461a      	mov	r2, r3
 8006a88:	4603      	mov	r3, r0
 8006a8a:	70fb      	strb	r3, [r7, #3]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70bb      	strb	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006aa2:	787c      	ldrb	r4, [r7, #1]
 8006aa4:	78ba      	ldrb	r2, [r7, #2]
 8006aa6:	78f9      	ldrb	r1, [r7, #3]
 8006aa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006aaa:	9302      	str	r3, [sp, #8]
 8006aac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ab0:	9301      	str	r3, [sp, #4]
 8006ab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ab6:	9300      	str	r3, [sp, #0]
 8006ab8:	4623      	mov	r3, r4
 8006aba:	f7fa fe68 	bl	800178e <HAL_HCD_HC_Init>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 f8b1 	bl	8006c2c <USBH_Get_USB_Status>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd90      	pop	{r4, r7, pc}

08006ad8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006af2:	78fa      	ldrb	r2, [r7, #3]
 8006af4:	4611      	mov	r1, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fa fed8 	bl	80018ac <HAL_HCD_HC_Halt>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 f892 	bl	8006c2c <USBH_Get_USB_Status>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006b16:	b590      	push	{r4, r7, lr}
 8006b18:	b089      	sub	sp, #36	; 0x24
 8006b1a:	af04      	add	r7, sp, #16
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	4608      	mov	r0, r1
 8006b20:	4611      	mov	r1, r2
 8006b22:	461a      	mov	r2, r3
 8006b24:	4603      	mov	r3, r0
 8006b26:	70fb      	strb	r3, [r7, #3]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70bb      	strb	r3, [r7, #2]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006b3e:	787c      	ldrb	r4, [r7, #1]
 8006b40:	78ba      	ldrb	r2, [r7, #2]
 8006b42:	78f9      	ldrb	r1, [r7, #3]
 8006b44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b48:	9303      	str	r3, [sp, #12]
 8006b4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b4c:	9302      	str	r3, [sp, #8]
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	4623      	mov	r3, r4
 8006b5a:	f7fa fecb 	bl	80018f4 <HAL_HCD_HC_SubmitRequest>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 f861 	bl	8006c2c <USBH_Get_USB_Status>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd90      	pop	{r4, r7, pc}

08006b78 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b8a:	78fa      	ldrb	r2, [r7, #3]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fb f951 	bl	8001e36 <HAL_HCD_HC_GetURBState>
 8006b94:	4603      	mov	r3, r0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d103      	bne.n	8006bbc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f864 	bl	8006c84 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006bbc:	20c8      	movs	r0, #200	; 0xc8
 8006bbe:	f7fa fa99 	bl	80010f4 <HAL_Delay>
  return USBH_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006be2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	212c      	movs	r1, #44	; 0x2c
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	4413      	add	r3, r2
 8006bf0:	333b      	adds	r3, #59	; 0x3b
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	212c      	movs	r1, #44	; 0x2c
 8006bfe:	fb01 f303 	mul.w	r3, r1, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	3354      	adds	r3, #84	; 0x54
 8006c06:	78ba      	ldrb	r2, [r7, #2]
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	e008      	b.n	8006c1e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	212c      	movs	r1, #44	; 0x2c
 8006c12:	fb01 f303 	mul.w	r3, r1, r3
 8006c16:	4413      	add	r3, r2
 8006c18:	3355      	adds	r3, #85	; 0x55
 8006c1a:	78ba      	ldrb	r2, [r7, #2]
 8006c1c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d817      	bhi.n	8006c70 <USBH_Get_USB_Status+0x44>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <USBH_Get_USB_Status+0x1c>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c5f 	.word	0x08006c5f
 8006c50:	08006c65 	.word	0x08006c65
 8006c54:	08006c6b 	.word	0x08006c6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c5c:	e00b      	b.n	8006c76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	73fb      	strb	r3, [r7, #15]
    break;
 8006c62:	e008      	b.n	8006c76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006c64:	2301      	movs	r3, #1
 8006c66:	73fb      	strb	r3, [r7, #15]
    break;
 8006c68:	e005      	b.n	8006c76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c6e:	e002      	b.n	8006c76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006c70:	2302      	movs	r3, #2
 8006c72:	73fb      	strb	r3, [r7, #15]
    break;
 8006c74:	bf00      	nop
  }
  return usb_status;
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	73fb      	strb	r3, [r7, #15]
 8006c9c:	e001      	b.n	8006ca2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4803      	ldr	r0, [pc, #12]	; (8006cb8 <MX_DriverVbusFS+0x34>)
 8006caa:	f7fa fcf5 	bl	8001698 <HAL_GPIO_WritePin>
}
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40020800 	.word	0x40020800

08006cbc <__errno>:
 8006cbc:	4b01      	ldr	r3, [pc, #4]	; (8006cc4 <__errno+0x8>)
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	2000002c 	.word	0x2000002c

08006cc8 <__libc_init_array>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	4d0d      	ldr	r5, [pc, #52]	; (8006d00 <__libc_init_array+0x38>)
 8006ccc:	4c0d      	ldr	r4, [pc, #52]	; (8006d04 <__libc_init_array+0x3c>)
 8006cce:	1b64      	subs	r4, r4, r5
 8006cd0:	10a4      	asrs	r4, r4, #2
 8006cd2:	2600      	movs	r6, #0
 8006cd4:	42a6      	cmp	r6, r4
 8006cd6:	d109      	bne.n	8006cec <__libc_init_array+0x24>
 8006cd8:	4d0b      	ldr	r5, [pc, #44]	; (8006d08 <__libc_init_array+0x40>)
 8006cda:	4c0c      	ldr	r4, [pc, #48]	; (8006d0c <__libc_init_array+0x44>)
 8006cdc:	f000 f92e 	bl	8006f3c <_init>
 8006ce0:	1b64      	subs	r4, r4, r5
 8006ce2:	10a4      	asrs	r4, r4, #2
 8006ce4:	2600      	movs	r6, #0
 8006ce6:	42a6      	cmp	r6, r4
 8006ce8:	d105      	bne.n	8006cf6 <__libc_init_array+0x2e>
 8006cea:	bd70      	pop	{r4, r5, r6, pc}
 8006cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf0:	4798      	blx	r3
 8006cf2:	3601      	adds	r6, #1
 8006cf4:	e7ee      	b.n	8006cd4 <__libc_init_array+0xc>
 8006cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfa:	4798      	blx	r3
 8006cfc:	3601      	adds	r6, #1
 8006cfe:	e7f2      	b.n	8006ce6 <__libc_init_array+0x1e>
 8006d00:	08006f98 	.word	0x08006f98
 8006d04:	08006f98 	.word	0x08006f98
 8006d08:	08006f98 	.word	0x08006f98
 8006d0c:	08006f9c 	.word	0x08006f9c

08006d10 <malloc>:
 8006d10:	4b02      	ldr	r3, [pc, #8]	; (8006d1c <malloc+0xc>)
 8006d12:	4601      	mov	r1, r0
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	f000 b87f 	b.w	8006e18 <_malloc_r>
 8006d1a:	bf00      	nop
 8006d1c:	2000002c 	.word	0x2000002c

08006d20 <free>:
 8006d20:	4b02      	ldr	r3, [pc, #8]	; (8006d2c <free+0xc>)
 8006d22:	4601      	mov	r1, r0
 8006d24:	6818      	ldr	r0, [r3, #0]
 8006d26:	f000 b80b 	b.w	8006d40 <_free_r>
 8006d2a:	bf00      	nop
 8006d2c:	2000002c 	.word	0x2000002c

08006d30 <memset>:
 8006d30:	4402      	add	r2, r0
 8006d32:	4603      	mov	r3, r0
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d100      	bne.n	8006d3a <memset+0xa>
 8006d38:	4770      	bx	lr
 8006d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3e:	e7f9      	b.n	8006d34 <memset+0x4>

08006d40 <_free_r>:
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	2900      	cmp	r1, #0
 8006d44:	d044      	beq.n	8006dd0 <_free_r+0x90>
 8006d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4a:	9001      	str	r0, [sp, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d52:	bfb8      	it	lt
 8006d54:	18e4      	addlt	r4, r4, r3
 8006d56:	f000 f8e3 	bl	8006f20 <__malloc_lock>
 8006d5a:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <_free_r+0x94>)
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	b933      	cbnz	r3, 8006d70 <_free_r+0x30>
 8006d62:	6063      	str	r3, [r4, #4]
 8006d64:	6014      	str	r4, [r2, #0]
 8006d66:	b003      	add	sp, #12
 8006d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6c:	f000 b8de 	b.w	8006f2c <__malloc_unlock>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d908      	bls.n	8006d86 <_free_r+0x46>
 8006d74:	6825      	ldr	r5, [r4, #0]
 8006d76:	1961      	adds	r1, r4, r5
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf01      	itttt	eq
 8006d7c:	6819      	ldreq	r1, [r3, #0]
 8006d7e:	685b      	ldreq	r3, [r3, #4]
 8006d80:	1949      	addeq	r1, r1, r5
 8006d82:	6021      	streq	r1, [r4, #0]
 8006d84:	e7ed      	b.n	8006d62 <_free_r+0x22>
 8006d86:	461a      	mov	r2, r3
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b10b      	cbz	r3, 8006d90 <_free_r+0x50>
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d9fa      	bls.n	8006d86 <_free_r+0x46>
 8006d90:	6811      	ldr	r1, [r2, #0]
 8006d92:	1855      	adds	r5, r2, r1
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	d10b      	bne.n	8006db0 <_free_r+0x70>
 8006d98:	6824      	ldr	r4, [r4, #0]
 8006d9a:	4421      	add	r1, r4
 8006d9c:	1854      	adds	r4, r2, r1
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	6011      	str	r1, [r2, #0]
 8006da2:	d1e0      	bne.n	8006d66 <_free_r+0x26>
 8006da4:	681c      	ldr	r4, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	6053      	str	r3, [r2, #4]
 8006daa:	4421      	add	r1, r4
 8006dac:	6011      	str	r1, [r2, #0]
 8006dae:	e7da      	b.n	8006d66 <_free_r+0x26>
 8006db0:	d902      	bls.n	8006db8 <_free_r+0x78>
 8006db2:	230c      	movs	r3, #12
 8006db4:	6003      	str	r3, [r0, #0]
 8006db6:	e7d6      	b.n	8006d66 <_free_r+0x26>
 8006db8:	6825      	ldr	r5, [r4, #0]
 8006dba:	1961      	adds	r1, r4, r5
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf04      	itt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	bf04      	itt	eq
 8006dc8:	1949      	addeq	r1, r1, r5
 8006dca:	6021      	streq	r1, [r4, #0]
 8006dcc:	6054      	str	r4, [r2, #4]
 8006dce:	e7ca      	b.n	8006d66 <_free_r+0x26>
 8006dd0:	b003      	add	sp, #12
 8006dd2:	bd30      	pop	{r4, r5, pc}
 8006dd4:	200008d0 	.word	0x200008d0

08006dd8 <sbrk_aligned>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	4e0e      	ldr	r6, [pc, #56]	; (8006e14 <sbrk_aligned+0x3c>)
 8006ddc:	460c      	mov	r4, r1
 8006dde:	6831      	ldr	r1, [r6, #0]
 8006de0:	4605      	mov	r5, r0
 8006de2:	b911      	cbnz	r1, 8006dea <sbrk_aligned+0x12>
 8006de4:	f000 f88c 	bl	8006f00 <_sbrk_r>
 8006de8:	6030      	str	r0, [r6, #0]
 8006dea:	4621      	mov	r1, r4
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 f887 	bl	8006f00 <_sbrk_r>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d00a      	beq.n	8006e0c <sbrk_aligned+0x34>
 8006df6:	1cc4      	adds	r4, r0, #3
 8006df8:	f024 0403 	bic.w	r4, r4, #3
 8006dfc:	42a0      	cmp	r0, r4
 8006dfe:	d007      	beq.n	8006e10 <sbrk_aligned+0x38>
 8006e00:	1a21      	subs	r1, r4, r0
 8006e02:	4628      	mov	r0, r5
 8006e04:	f000 f87c 	bl	8006f00 <_sbrk_r>
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d101      	bne.n	8006e10 <sbrk_aligned+0x38>
 8006e0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e10:	4620      	mov	r0, r4
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	200008d4 	.word	0x200008d4

08006e18 <_malloc_r>:
 8006e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1c:	1ccd      	adds	r5, r1, #3
 8006e1e:	f025 0503 	bic.w	r5, r5, #3
 8006e22:	3508      	adds	r5, #8
 8006e24:	2d0c      	cmp	r5, #12
 8006e26:	bf38      	it	cc
 8006e28:	250c      	movcc	r5, #12
 8006e2a:	2d00      	cmp	r5, #0
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	db01      	blt.n	8006e34 <_malloc_r+0x1c>
 8006e30:	42a9      	cmp	r1, r5
 8006e32:	d905      	bls.n	8006e40 <_malloc_r+0x28>
 8006e34:	230c      	movs	r3, #12
 8006e36:	603b      	str	r3, [r7, #0]
 8006e38:	2600      	movs	r6, #0
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e40:	4e2e      	ldr	r6, [pc, #184]	; (8006efc <_malloc_r+0xe4>)
 8006e42:	f000 f86d 	bl	8006f20 <__malloc_lock>
 8006e46:	6833      	ldr	r3, [r6, #0]
 8006e48:	461c      	mov	r4, r3
 8006e4a:	bb34      	cbnz	r4, 8006e9a <_malloc_r+0x82>
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	4638      	mov	r0, r7
 8006e50:	f7ff ffc2 	bl	8006dd8 <sbrk_aligned>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	4604      	mov	r4, r0
 8006e58:	d14d      	bne.n	8006ef6 <_malloc_r+0xde>
 8006e5a:	6834      	ldr	r4, [r6, #0]
 8006e5c:	4626      	mov	r6, r4
 8006e5e:	2e00      	cmp	r6, #0
 8006e60:	d140      	bne.n	8006ee4 <_malloc_r+0xcc>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	4631      	mov	r1, r6
 8006e66:	4638      	mov	r0, r7
 8006e68:	eb04 0803 	add.w	r8, r4, r3
 8006e6c:	f000 f848 	bl	8006f00 <_sbrk_r>
 8006e70:	4580      	cmp	r8, r0
 8006e72:	d13a      	bne.n	8006eea <_malloc_r+0xd2>
 8006e74:	6821      	ldr	r1, [r4, #0]
 8006e76:	3503      	adds	r5, #3
 8006e78:	1a6d      	subs	r5, r5, r1
 8006e7a:	f025 0503 	bic.w	r5, r5, #3
 8006e7e:	3508      	adds	r5, #8
 8006e80:	2d0c      	cmp	r5, #12
 8006e82:	bf38      	it	cc
 8006e84:	250c      	movcc	r5, #12
 8006e86:	4629      	mov	r1, r5
 8006e88:	4638      	mov	r0, r7
 8006e8a:	f7ff ffa5 	bl	8006dd8 <sbrk_aligned>
 8006e8e:	3001      	adds	r0, #1
 8006e90:	d02b      	beq.n	8006eea <_malloc_r+0xd2>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	442b      	add	r3, r5
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	e00e      	b.n	8006eb8 <_malloc_r+0xa0>
 8006e9a:	6822      	ldr	r2, [r4, #0]
 8006e9c:	1b52      	subs	r2, r2, r5
 8006e9e:	d41e      	bmi.n	8006ede <_malloc_r+0xc6>
 8006ea0:	2a0b      	cmp	r2, #11
 8006ea2:	d916      	bls.n	8006ed2 <_malloc_r+0xba>
 8006ea4:	1961      	adds	r1, r4, r5
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	6025      	str	r5, [r4, #0]
 8006eaa:	bf18      	it	ne
 8006eac:	6059      	strne	r1, [r3, #4]
 8006eae:	6863      	ldr	r3, [r4, #4]
 8006eb0:	bf08      	it	eq
 8006eb2:	6031      	streq	r1, [r6, #0]
 8006eb4:	5162      	str	r2, [r4, r5]
 8006eb6:	604b      	str	r3, [r1, #4]
 8006eb8:	4638      	mov	r0, r7
 8006eba:	f104 060b 	add.w	r6, r4, #11
 8006ebe:	f000 f835 	bl	8006f2c <__malloc_unlock>
 8006ec2:	f026 0607 	bic.w	r6, r6, #7
 8006ec6:	1d23      	adds	r3, r4, #4
 8006ec8:	1af2      	subs	r2, r6, r3
 8006eca:	d0b6      	beq.n	8006e3a <_malloc_r+0x22>
 8006ecc:	1b9b      	subs	r3, r3, r6
 8006ece:	50a3      	str	r3, [r4, r2]
 8006ed0:	e7b3      	b.n	8006e3a <_malloc_r+0x22>
 8006ed2:	6862      	ldr	r2, [r4, #4]
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	bf0c      	ite	eq
 8006ed8:	6032      	streq	r2, [r6, #0]
 8006eda:	605a      	strne	r2, [r3, #4]
 8006edc:	e7ec      	b.n	8006eb8 <_malloc_r+0xa0>
 8006ede:	4623      	mov	r3, r4
 8006ee0:	6864      	ldr	r4, [r4, #4]
 8006ee2:	e7b2      	b.n	8006e4a <_malloc_r+0x32>
 8006ee4:	4634      	mov	r4, r6
 8006ee6:	6876      	ldr	r6, [r6, #4]
 8006ee8:	e7b9      	b.n	8006e5e <_malloc_r+0x46>
 8006eea:	230c      	movs	r3, #12
 8006eec:	603b      	str	r3, [r7, #0]
 8006eee:	4638      	mov	r0, r7
 8006ef0:	f000 f81c 	bl	8006f2c <__malloc_unlock>
 8006ef4:	e7a1      	b.n	8006e3a <_malloc_r+0x22>
 8006ef6:	6025      	str	r5, [r4, #0]
 8006ef8:	e7de      	b.n	8006eb8 <_malloc_r+0xa0>
 8006efa:	bf00      	nop
 8006efc:	200008d0 	.word	0x200008d0

08006f00 <_sbrk_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d06      	ldr	r5, [pc, #24]	; (8006f1c <_sbrk_r+0x1c>)
 8006f04:	2300      	movs	r3, #0
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	f7fa f80e 	bl	8000f2c <_sbrk>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_sbrk_r+0x1a>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_sbrk_r+0x1a>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	200008d8 	.word	0x200008d8

08006f20 <__malloc_lock>:
 8006f20:	4801      	ldr	r0, [pc, #4]	; (8006f28 <__malloc_lock+0x8>)
 8006f22:	f000 b809 	b.w	8006f38 <__retarget_lock_acquire_recursive>
 8006f26:	bf00      	nop
 8006f28:	200008dc 	.word	0x200008dc

08006f2c <__malloc_unlock>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__malloc_unlock+0x8>)
 8006f2e:	f000 b804 	b.w	8006f3a <__retarget_lock_release_recursive>
 8006f32:	bf00      	nop
 8006f34:	200008dc 	.word	0x200008dc

08006f38 <__retarget_lock_acquire_recursive>:
 8006f38:	4770      	bx	lr

08006f3a <__retarget_lock_release_recursive>:
 8006f3a:	4770      	bx	lr

08006f3c <_init>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr

08006f48 <_fini>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr
